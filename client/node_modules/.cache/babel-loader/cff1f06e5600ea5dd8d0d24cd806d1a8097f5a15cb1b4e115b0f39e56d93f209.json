{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vindi\\\\OneDrive\\\\Documents\\\\whatschat\\\\client\\\\src\\\\components\\\\Chat\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport { useLocation } from 'react-router-dom';\nimport Infobar from '../Infobar/Infobar';\n// import { eventNames } from 'process';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\nconst Chat = () => {\n  _s();\n  const location = useLocation();\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = 'localhost:5000';\n  useEffect(() => {\n    // if (location.search) { // Ensure location.search is defined\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room);\n    socket.on('connect', () => {\n      console.log('Connected to the server');\n      // socket.emit('join',{name,room},({error})=>{\n      //     alert(error);\n      // });\n      socket.emit('join', {\n        name,\n        room\n      }, () => {});\n    });\n    return () => {\n      socket.disconnect();\n      socket.off();\n    };\n\n    // console.log(socket);  \n    // logs the parsed object\n    // }\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages(messages => [...messages, message]);\n    });\n  }, [messages]);\n  const sendMessage = event => {\n    event.preventDefault();\n    if (message) {\n      socket.emit('sendMessage', message, () => {\n        setMessage('');\n      });\n    }\n  };\n  console.log(message, messages);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Infobar, {\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: (message, setMessage, sendMessage)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 13\n  }, this);\n};\n_s(Chat, \"Maa120nZ8JmssBnQGtOqN1XcIqU=\", false, function () {\n  return [useLocation];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","queryString","io","useLocation","Infobar","jsxDEV","_jsxDEV","socket","Chat","_s","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","parse","search","on","console","log","emit","disconnect","off","sendMessage","event","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Input","_c","$RefreshReg$"],"sources":["C:/Users/vindi/OneDrive/Documents/whatschat/client/src/components/Chat/Chat.js"],"sourcesContent":["import React, { useEffect,useState } from 'react'\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Infobar from '../Infobar/Infobar';\r\n// import { eventNames } from 'process';\r\nimport './Chat.css'\r\n\r\nlet socket;\r\n\r\nconst Chat=()=>{\r\n    const location = useLocation();\r\n    const [name,setName]=useState('');\r\n    const [room,setRoom]=useState('');\r\n    const [message,setMessage]=useState('');\r\n    const [messages,setMessages]=useState([]);\r\n    const ENDPOINT='localhost:5000'\r\n    useEffect(() => {\r\n        // if (location.search) { // Ensure location.search is defined\r\n            const {name,room} = queryString.parse(location.search);\r\n\r\n            socket=io(ENDPOINT);\r\n            setName(name);\r\n            setRoom(room); \r\n\r\n            socket.on('connect',()=>{\r\n                console.log('Connected to the server');\r\n                // socket.emit('join',{name,room},({error})=>{\r\n                //     alert(error);\r\n                // });\r\n                socket.emit('join',{name,room},()=>{\r\n                });\r\n            });\r\n            return ()=>{\r\n                socket.disconnect();\r\n                socket.off();\r\n            };\r\n\r\n            \r\n            // console.log(socket);  \r\n                  // logs the parsed object\r\n        // }\r\n    }, [ENDPOINT,location.search]);\r\n\r\n    useEffect(()=>{\r\n        socket.on('message',message=>{\r\n            setMessages(messages=>[...messages,message]);        \r\n        })\r\n    },[messages]);\r\n\r\n\r\nconst sendMessage=(event)=>{\r\n    event.preventDefault();\r\n    if(message){\r\n        socket.emit('sendMessage',message,()=>{\r\n            setMessage('')\r\n        })\r\n    }\r\n}\r\nconsole.log(message,messages);\r\n\r\n    return (<div className='outerContainer'>\r\n        <div className='container'>\r\n            <Infobar room={room}/>\r\n            <Input message={message,setMessage,sendMessage}/>\r\n            {/* <input \r\n            value={message} \r\n            onChange={(event)=>{\r\n                setMessage(event.target.value)\r\n            }}\r\n            onKeyDown={event=>event.key==='Enter'? sendMessage(event):null}></input> */}\r\n        </div>\r\n    </div>);\r\n    \r\n    \r\n};\r\nexport default Chat; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}