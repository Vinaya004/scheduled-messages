{"ast":null,"code":"// // // import React, { useEffect,useState } from 'react'\n// // // import queryString from 'query-string';\n// // // import io from 'socket.io-client';\n// // // import { useLocation } from 'react-router-dom';\n// // // import Infobar from '../Infobar/Infobar';\n// // // import Input from '../Input/Input';\n// // // import Messages from '../Messages/Messages';\n// // // // import { eventNames } from 'process';\n// // // import './Chat.css'\n\n// // // let socket;\n\n// // // const Chat=()=>{\n// // //     const location = useLocation();\n// // //     const [name,setName]=useState('');\n// // //     const [room,setRoom]=useState('');\n// // //     const [message,setMessage]=useState('');\n// // //     const [messages,setMessages]=useState([]);\n// // //     const ENDPOINT='localhost:5000'\n// // //     useEffect(() => {\n// // //         // if (location.search) { // Ensure location.search is defined\n// // //             const {name,room} = queryString.parse(location.search);\n\n// // //             socket=io(ENDPOINT);\n// // //             setName(name);\n// // //             setRoom(room); \n\n// // //             socket.on('connect',()=>{\n// // //                 console.log('Connected to the server');\n// // //                 // socket.emit('join',{name,room},({error})=>{\n// // //                 //     alert(error);\n// // //                 // });\n// // //                 socket.emit('join',{name,room},()=>{\n// // //                 });\n// // //             });\n// // //             return ()=>{\n// // //                 socket.disconnect();\n// // //                 socket.off();\n// // //             };\n\n// // //             // console.log(socket);  \n// // //                   // logs the parsed object\n// // //         // }\n// // //     }, [ENDPOINT,location.search]);\n\n// // //     useEffect(()=>{\n// // //         socket.on('message',message=>{\n// // //             setMessages(messages=>[...messages,message]);        \n// // //         })\n// // //     },[messages]);\n\n// // // const sendMessage=(event)=>{\n// // //     event.preventDefault();\n// // //     if(message){\n// // //         socket.emit('sendMessage',message,()=>{\n// // //             setMessage('')\n// // //         })\n// // //     }\n// // // }\n// // // console.log(message,messages);\n\n// // //     return (<div className='outerContainer'>\n// // //         <div className='container'>\n// // //             <Infobar room={room}/>\n// // //             <Input message={message} setMessage={setMessage} sendMessage={sendMessage}/>\n// // //             <Messages messages={messages}/>\n// // //         </div>\n// // //     </div>);\n\n// // // };\n// // // export default Chat; \n\n// // import React, { useEffect, useState } from 'react';\n// // import queryString from 'query-string';\n// // import io from 'socket.io-client';\n// // import { useLocation } from 'react-router-dom';\n// // import Infobar from '../Infobar/Infobar';\n// // import Input from '../Input/Input';\n// // import Messages from '../Messages/Messages';\n// // import './Chat.css';\n\n// // let socket;\n\n// // const Chat = () => {\n// //     const location = useLocation();\n// //     const [name, setName] = useState('');\n// //     const [room, setRoom] = useState('');\n// //     const [message, setMessage] = useState('');\n// //     const [messages, setMessages] = useState([]);\n// //     const ENDPOINT = 'http://localhost:5000'; // Make sure to include the protocol (http://)\n\n// //     useEffect(() => {\n// //         const { name, room } = queryString.parse(location.search);\n// //         socket = io(ENDPOINT);\n// //         setName(name);\n// //         setRoom(room);\n\n// //         socket.emit('join', { name, room }, (error) => {\n// //             if (error) {\n// //                 alert(error);\n// //             }\n// //         });\n\n// //         // Set up the message listener\n// //         socket.on('message', (message) => {\n// //             setMessages((prevMessages) => [...prevMessages, message]);\n// //         });\n\n// //         return () => {\n// //             socket.disconnect();\n// //             socket.off(); // Clean up the socket connection\n// //         };\n// //     }, [ENDPOINT, location.search]); // Only set up the socket on these changes\n\n// //     const sendMessage = (event) => {\n// //         event.preventDefault();\n// //         if (message) {\n// //             socket.emit('sendMessage', message, () => {\n// //                 setMessage('');\n// //             });\n// //         }\n// //     };\n\n// //     return (\n// //         <div className='outerContainer'>\n// //             <div className='container'>\n// //                 <Infobar room={room} />\n// //                 <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n// //                 <Messages messages={messages} name={name} /> {/* Ensure name is passed if needed */}\n// //             </div>\n// //         </div>\n// //     );\n// // };\n\n// // export default Chat;\n\n// import React, { useEffect, useState } from 'react';\n// import queryString from 'query-string';\n// import io from 'socket.io-client';\n// import { useLocation } from 'react-router-dom';\n// import Infobar from '../Infobar/Infobar';\n// import Input from '../Input/Input';\n// import Messages from '../Messages/Messages';\n// import TextContainer from '../TextContainer/TextContainer';\n// import './Chat.css';\n\n// let socket;\n\n// const Chat = () => {\n//     const location = useLocation();\n//     const [name, setName] = useState('');\n//     const [room, setRoom] = useState('');\n//     const [users, setUsers] = useState([]); // Initialize users as an array\n//     const [message, setMessage] = useState('');\n//     const [messages, setMessages] = useState([]);\n//     const [scheduleTime, setScheduleTime] = useState('');\n//     const ENDPOINT = 'http://localhost:5000';\n\n//     useEffect(() => {\n//         const { name, room } = queryString.parse(location.search);\n//         socket = io(ENDPOINT);\n//         setName(name);\n//         setRoom(room);\n\n//         socket.emit('join', { name, room }, (error) => {\n//             if (error) {\n//                 alert(error);\n//             }\n//         });\n\n//         // Set up message listener and room data listener\n//         socket.on('message', (message) => {\n//             setMessages((prevMessages) => [...prevMessages, message]);\n//         });\n\n//         socket.on(\"roomData\", ({ users }) => {\n//             setUsers(users);\n//         });\n\n//         return () => {\n//             socket.disconnect();\n//             socket.off(); // Clean up the socket connection\n//         };\n//     }, [ENDPOINT, location.search]);\n\n//     const sendMessage = (event) => {\n//         event.preventDefault();\n//         if (message) {\n//             const currentTime = new Date();\n//             const scheduledTime = new Date(scheduleTime);\n\n//             // Check if the scheduled time is in the future\n//             if (scheduledTime > currentTime) {\n//                 const timeDiff = scheduledTime - currentTime;\n\n//                 // Schedule sending the message\n//                 setTimeout(() => {\n//                     socket.emit('sendMessage', message, () => {\n//                         setMessage('');\n//                         setScheduleTime('');\n//                     });\n//                 }, timeDiff);\n//             } else {\n//                 // Send message immediately if no valid scheduled time\n//                 socket.emit('sendMessage', message, () => {\n//                     setMessage('');\n//                     setScheduleTime('');\n//                 });\n//             }\n//         }\n//     };\n\n//     return (\n//         <div className='outerContainer'>\n//             <div className='container'>\n//                 <Infobar room={room} />\n//                 <Messages messages={messages} name={name} />\n//                 <Input \n//                     message={message} \n//                     setMessage={setMessage} \n//                     sendMessage={sendMessage} \n//                     scheduleTime={scheduleTime} \n//                     setScheduleTime={setScheduleTime} \n//                 />\n//             </div>\n//             <TextContainer users={users} />\n//         </div>\n//     );\n// };\n\n// export default Chat;\n\nconst express = require('express');\nconst socketio = require('socket.io');\nconst http = require('http');\nconst {\n  addUser,\n  removeUser,\n  getUser,\n  getUsersInRoom\n} = require('./users');\nconst PORT = process.env.PORT || 5000;\nconst router = require('./router');\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketio(server, {\n  cors: {\n    origin: \"http://localhost:3000\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\nio.on('connection', socket => {\n  socket.on('join', ({\n    name,\n    room\n  }, callback) => {\n    const {\n      error,\n      user\n    } = addUser({\n      id: socket.id,\n      name,\n      room\n    });\n    if (error) {\n      return callback(error);\n    }\n    socket.emit('message', {\n      user: 'admin',\n      text: `${user.name}, welcome to the room ${user.room}`\n    });\n    socket.broadcast.to(user.room).emit('message', {\n      user: 'admin',\n      text: `${user.name} has joined`\n    });\n    socket.join(user.room);\n    io.to(user.room).emit('roomData', {\n      room: user.room,\n      users: getUsersInRoom(user.room)\n    });\n    callback();\n  });\n  socket.on('sendMessage', (message, callback) => {\n    const user = getUser(socket.id);\n    if (!user) {\n      return callback(\"User not found\");\n    }\n    if (user.room) {\n      io.to(user.room).emit('message', message); // Emit the complete message object\n      io.to(user.room).emit('roomData', {\n        room: user.room,\n        users: getUsersInRoom(user.room)\n      });\n    }\n    callback();\n  });\n  socket.on('seenMessage', messageId => {\n    const user = getUser(socket.id);\n    if (user && user.room) {\n      io.to(user.room).emit('messageSeen', messageId); // Notify others that the message was seen\n    }\n  });\n  socket.on('disconnect', () => {\n    console.log(\"User has left\");\n    const user = removeUser(socket.id);\n    if (user) {\n      io.to(user.room).emit('message', {\n        user: 'admin',\n        text: `${user.name} has left the room.`\n      });\n    }\n  });\n});\napp.use(router);\nserver.listen(PORT, () => console.log(`Server listening on port ${PORT}`));","map":{"version":3,"names":["express","require","socketio","http","addUser","removeUser","getUser","getUsersInRoom","PORT","process","env","router","app","server","createServer","io","cors","origin","methods","on","socket","name","room","callback","error","user","id","emit","text","broadcast","to","join","users","message","messageId","console","log","use","listen"],"sources":["C:/Users/vindi/OneDrive/Documents/whatschat/client/src/components/Chat/Chat.js"],"sourcesContent":["// // // import React, { useEffect,useState } from 'react'\r\n// // // import queryString from 'query-string';\r\n// // // import io from 'socket.io-client';\r\n// // // import { useLocation } from 'react-router-dom';\r\n// // // import Infobar from '../Infobar/Infobar';\r\n// // // import Input from '../Input/Input';\r\n// // // import Messages from '../Messages/Messages';\r\n// // // // import { eventNames } from 'process';\r\n// // // import './Chat.css'\r\n\r\n// // // let socket;\r\n\r\n// // // const Chat=()=>{\r\n// // //     const location = useLocation();\r\n// // //     const [name,setName]=useState('');\r\n// // //     const [room,setRoom]=useState('');\r\n// // //     const [message,setMessage]=useState('');\r\n// // //     const [messages,setMessages]=useState([]);\r\n// // //     const ENDPOINT='localhost:5000'\r\n// // //     useEffect(() => {\r\n// // //         // if (location.search) { // Ensure location.search is defined\r\n// // //             const {name,room} = queryString.parse(location.search);\r\n\r\n// // //             socket=io(ENDPOINT);\r\n// // //             setName(name);\r\n// // //             setRoom(room); \r\n\r\n// // //             socket.on('connect',()=>{\r\n// // //                 console.log('Connected to the server');\r\n// // //                 // socket.emit('join',{name,room},({error})=>{\r\n// // //                 //     alert(error);\r\n// // //                 // });\r\n// // //                 socket.emit('join',{name,room},()=>{\r\n// // //                 });\r\n// // //             });\r\n// // //             return ()=>{\r\n// // //                 socket.disconnect();\r\n// // //                 socket.off();\r\n// // //             };\r\n\r\n            \r\n// // //             // console.log(socket);  \r\n// // //                   // logs the parsed object\r\n// // //         // }\r\n// // //     }, [ENDPOINT,location.search]);\r\n\r\n// // //     useEffect(()=>{\r\n// // //         socket.on('message',message=>{\r\n// // //             setMessages(messages=>[...messages,message]);        \r\n// // //         })\r\n// // //     },[messages]);\r\n\r\n\r\n// // // const sendMessage=(event)=>{\r\n// // //     event.preventDefault();\r\n// // //     if(message){\r\n// // //         socket.emit('sendMessage',message,()=>{\r\n// // //             setMessage('')\r\n// // //         })\r\n// // //     }\r\n// // // }\r\n// // // console.log(message,messages);\r\n\r\n// // //     return (<div className='outerContainer'>\r\n// // //         <div className='container'>\r\n// // //             <Infobar room={room}/>\r\n// // //             <Input message={message} setMessage={setMessage} sendMessage={sendMessage}/>\r\n// // //             <Messages messages={messages}/>\r\n// // //         </div>\r\n// // //     </div>);\r\n    \r\n    \r\n// // // };\r\n// // // export default Chat; \r\n\r\n\r\n// // import React, { useEffect, useState } from 'react';\r\n// // import queryString from 'query-string';\r\n// // import io from 'socket.io-client';\r\n// // import { useLocation } from 'react-router-dom';\r\n// // import Infobar from '../Infobar/Infobar';\r\n// // import Input from '../Input/Input';\r\n// // import Messages from '../Messages/Messages';\r\n// // import './Chat.css';\r\n\r\n// // let socket;\r\n\r\n// // const Chat = () => {\r\n// //     const location = useLocation();\r\n// //     const [name, setName] = useState('');\r\n// //     const [room, setRoom] = useState('');\r\n// //     const [message, setMessage] = useState('');\r\n// //     const [messages, setMessages] = useState([]);\r\n// //     const ENDPOINT = 'http://localhost:5000'; // Make sure to include the protocol (http://)\r\n\r\n// //     useEffect(() => {\r\n// //         const { name, room } = queryString.parse(location.search);\r\n// //         socket = io(ENDPOINT);\r\n// //         setName(name);\r\n// //         setRoom(room);\r\n\r\n// //         socket.emit('join', { name, room }, (error) => {\r\n// //             if (error) {\r\n// //                 alert(error);\r\n// //             }\r\n// //         });\r\n\r\n// //         // Set up the message listener\r\n// //         socket.on('message', (message) => {\r\n// //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// //         });\r\n\r\n// //         return () => {\r\n// //             socket.disconnect();\r\n// //             socket.off(); // Clean up the socket connection\r\n// //         };\r\n// //     }, [ENDPOINT, location.search]); // Only set up the socket on these changes\r\n\r\n// //     const sendMessage = (event) => {\r\n// //         event.preventDefault();\r\n// //         if (message) {\r\n// //             socket.emit('sendMessage', message, () => {\r\n// //                 setMessage('');\r\n// //             });\r\n// //         }\r\n// //     };\r\n\r\n// //     return (\r\n// //         <div className='outerContainer'>\r\n// //             <div className='container'>\r\n// //                 <Infobar room={room} />\r\n// //                 <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n// //                 <Messages messages={messages} name={name} /> {/* Ensure name is passed if needed */}\r\n// //             </div>\r\n// //         </div>\r\n// //     );\r\n// // };\r\n\r\n// // export default Chat;\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import queryString from 'query-string';\r\n// import io from 'socket.io-client';\r\n// import { useLocation } from 'react-router-dom';\r\n// import Infobar from '../Infobar/Infobar';\r\n// import Input from '../Input/Input';\r\n// import Messages from '../Messages/Messages';\r\n// import TextContainer from '../TextContainer/TextContainer';\r\n// import './Chat.css';\r\n\r\n// let socket;\r\n\r\n// const Chat = () => {\r\n//     const location = useLocation();\r\n//     const [name, setName] = useState('');\r\n//     const [room, setRoom] = useState('');\r\n//     const [users, setUsers] = useState([]); // Initialize users as an array\r\n//     const [message, setMessage] = useState('');\r\n//     const [messages, setMessages] = useState([]);\r\n//     const [scheduleTime, setScheduleTime] = useState('');\r\n//     const ENDPOINT = 'http://localhost:5000';\r\n\r\n//     useEffect(() => {\r\n//         const { name, room } = queryString.parse(location.search);\r\n//         socket = io(ENDPOINT);\r\n//         setName(name);\r\n//         setRoom(room);\r\n\r\n//         socket.emit('join', { name, room }, (error) => {\r\n//             if (error) {\r\n//                 alert(error);\r\n//             }\r\n//         });\r\n\r\n//         // Set up message listener and room data listener\r\n//         socket.on('message', (message) => {\r\n//             setMessages((prevMessages) => [...prevMessages, message]);\r\n//         });\r\n\r\n//         socket.on(\"roomData\", ({ users }) => {\r\n//             setUsers(users);\r\n//         });\r\n\r\n//         return () => {\r\n//             socket.disconnect();\r\n//             socket.off(); // Clean up the socket connection\r\n//         };\r\n//     }, [ENDPOINT, location.search]);\r\n\r\n//     const sendMessage = (event) => {\r\n//         event.preventDefault();\r\n//         if (message) {\r\n//             const currentTime = new Date();\r\n//             const scheduledTime = new Date(scheduleTime);\r\n\r\n//             // Check if the scheduled time is in the future\r\n//             if (scheduledTime > currentTime) {\r\n//                 const timeDiff = scheduledTime - currentTime;\r\n\r\n//                 // Schedule sending the message\r\n//                 setTimeout(() => {\r\n//                     socket.emit('sendMessage', message, () => {\r\n//                         setMessage('');\r\n//                         setScheduleTime('');\r\n//                     });\r\n//                 }, timeDiff);\r\n//             } else {\r\n//                 // Send message immediately if no valid scheduled time\r\n//                 socket.emit('sendMessage', message, () => {\r\n//                     setMessage('');\r\n//                     setScheduleTime('');\r\n//                 });\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className='outerContainer'>\r\n//             <div className='container'>\r\n//                 <Infobar room={room} />\r\n//                 <Messages messages={messages} name={name} />\r\n//                 <Input \r\n//                     message={message} \r\n//                     setMessage={setMessage} \r\n//                     sendMessage={sendMessage} \r\n//                     scheduleTime={scheduleTime} \r\n//                     setScheduleTime={setScheduleTime} \r\n//                 />\r\n//             </div>\r\n//             <TextContainer users={users} />\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Chat;\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst express = require('express');\r\nconst socketio = require('socket.io');\r\nconst http = require('http');\r\nconst { addUser, removeUser, getUser, getUsersInRoom } = require('./users');\r\n\r\nconst PORT = process.env.PORT || 5000;\r\n\r\nconst router = require('./router');\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = socketio(server, {\r\n    cors: {\r\n        origin: \"http://localhost:3000\",\r\n        methods: [\"GET\", \"POST\"]\r\n    }\r\n});\r\n\r\nio.on('connection', (socket) => {\r\n    socket.on('join', ({ name, room }, callback) => {\r\n        const { error, user } = addUser({ id: socket.id, name, room });\r\n\r\n        if (error) { return callback(error); }\r\n\r\n        socket.emit('message', { user: 'admin', text: `${user.name}, welcome to the room ${user.room}` });\r\n        socket.broadcast.to(user.room).emit('message', { user: 'admin', text: `${user.name} has joined` });\r\n\r\n        socket.join(user.room);\r\n        io.to(user.room).emit('roomData', { room: user.room, users: getUsersInRoom(user.room) });\r\n\r\n        callback();\r\n    });\r\n\r\n    socket.on('sendMessage', (message, callback) => {\r\n        const user = getUser(socket.id);\r\n        if (!user) {\r\n            return callback(\"User not found\");\r\n        }\r\n        if (user.room) {\r\n            io.to(user.room).emit('message', message); // Emit the complete message object\r\n            io.to(user.room).emit('roomData', { room: user.room, users: getUsersInRoom(user.room) });\r\n        }\r\n        callback();\r\n    });\r\n\r\n    socket.on('seenMessage', (messageId) => {\r\n        const user = getUser(socket.id);\r\n        if (user && user.room) {\r\n            io.to(user.room).emit('messageSeen', messageId); // Notify others that the message was seen\r\n        }\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n        console.log(\"User has left\");\r\n        const user = removeUser(socket.id);\r\n        if (user) {\r\n            io.to(user.room).emit('message', { user: 'admin', text: `${user.name} has left the room.` });\r\n        }\r\n    });\r\n});\r\n\r\napp.use(router);\r\n\r\nserver.listen(PORT, () => console.log(`Server listening on port ${PORT}`));\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAW,CAAC;AACrC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEG,OAAO;EAAEC,UAAU;EAAEC,OAAO;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}