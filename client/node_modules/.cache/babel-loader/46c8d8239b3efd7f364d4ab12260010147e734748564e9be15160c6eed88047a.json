{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vindi\\\\OneDrive\\\\Documents\\\\whatschat\\\\client\\\\src\\\\components\\\\Chat\\\\Chat.js\",\n  _s = $RefreshSig$();\n// // // // import React, { useEffect,useState } from 'react'\n// // // // import queryString from 'query-string';\n// // // // import io from 'socket.io-client';\n// // // // import { useLocation } from 'react-router-dom';\n// // // // import Infobar from '../Infobar/Infobar';\n// // // // import Input from '../Input/Input';\n// // // // import Messages from '../Messages/Messages';\n// // // // // import { eventNames } from 'process';\n// // // // import './Chat.css'\n\n// // // // let socket;\n\n// // // // const Chat=()=>{\n// // // //     const location = useLocation();\n// // // //     const [name,setName]=useState('');\n// // // //     const [room,setRoom]=useState('');\n// // // //     const [message,setMessage]=useState('');\n// // // //     const [messages,setMessages]=useState([]);\n// // // //     const ENDPOINT='localhost:5000'\n// // // //     useEffect(() => {\n// // // //         // if (location.search) { // Ensure location.search is defined\n// // // //             const {name,room} = queryString.parse(location.search);\n\n// // // //             socket=io(ENDPOINT);\n// // // //             setName(name);\n// // // //             setRoom(room); \n\n// // // //             socket.on('connect',()=>{\n// // // //                 console.log('Connected to the server');\n// // // //                 // socket.emit('join',{name,room},({error})=>{\n// // // //                 //     alert(error);\n// // // //                 // });\n// // // //                 socket.emit('join',{name,room},()=>{\n// // // //                 });\n// // // //             });\n// // // //             return ()=>{\n// // // //                 socket.disconnect();\n// // // //                 socket.off();\n// // // //             };\n\n// // // //             // console.log(socket);  \n// // // //                   // logs the parsed object\n// // // //         // }\n// // // //     }, [ENDPOINT,location.search]);\n\n// // // //     useEffect(()=>{\n// // // //         socket.on('message',message=>{\n// // // //             setMessages(messages=>[...messages,message]);        \n// // // //         })\n// // // //     },[messages]);\n\n// // // // const sendMessage=(event)=>{\n// // // //     event.preventDefault();\n// // // //     if(message){\n// // // //         socket.emit('sendMessage',message,()=>{\n// // // //             setMessage('')\n// // // //         })\n// // // //     }\n// // // // }\n// // // // console.log(message,messages);\n\n// // // //     return (<div className='outerContainer'>\n// // // //         <div className='container'>\n// // // //             <Infobar room={room}/>\n// // // //             <Input message={message} setMessage={setMessage} sendMessage={sendMessage}/>\n// // // //             <Messages messages={messages}/>\n// // // //         </div>\n// // // //     </div>);\n\n// // // // };\n// // // // export default Chat; \n\n// // // import React, { useEffect, useState } from 'react';\n// // // import queryString from 'query-string';\n// // // import io from 'socket.io-client';\n// // // import { useLocation } from 'react-router-dom';\n// // // import Infobar from '../Infobar/Infobar';\n// // // import Input from '../Input/Input';\n// // // import Messages from '../Messages/Messages';\n// // // import './Chat.css';\n\n// // // let socket;\n\n// // // const Chat = () => {\n// // //     const location = useLocation();\n// // //     const [name, setName] = useState('');\n// // //     const [room, setRoom] = useState('');\n// // //     const [message, setMessage] = useState('');\n// // //     const [messages, setMessages] = useState([]);\n// // //     const ENDPOINT = 'http://localhost:5000'; // Make sure to include the protocol (http://)\n\n// // //     useEffect(() => {\n// // //         const { name, room } = queryString.parse(location.search);\n// // //         socket = io(ENDPOINT);\n// // //         setName(name);\n// // //         setRoom(room);\n\n// // //         socket.emit('join', { name, room }, (error) => {\n// // //             if (error) {\n// // //                 alert(error);\n// // //             }\n// // //         });\n\n// // //         // Set up the message listener\n// // //         socket.on('message', (message) => {\n// // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // //         });\n\n// // //         return () => {\n// // //             socket.disconnect();\n// // //             socket.off(); // Clean up the socket connection\n// // //         };\n// // //     }, [ENDPOINT, location.search]); // Only set up the socket on these changes\n\n// // //     const sendMessage = (event) => {\n// // //         event.preventDefault();\n// // //         if (message) {\n// // //             socket.emit('sendMessage', message, () => {\n// // //                 setMessage('');\n// // //             });\n// // //         }\n// // //     };\n\n// // //     return (\n// // //         <div className='outerContainer'>\n// // //             <div className='container'>\n// // //                 <Infobar room={room} />\n// // //                 <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n// // //                 <Messages messages={messages} name={name} /> {/* Ensure name is passed if needed */}\n// // //             </div>\n// // //         </div>\n// // //     );\n// // // };\n\n// // // export default Chat;\n\n// // import React, { useEffect, useState } from 'react';\n// // import queryString from 'query-string';\n// // import io from 'socket.io-client';\n// // import { useLocation } from 'react-router-dom';\n// // import Infobar from '../Infobar/Infobar';\n// // import Input from '../Input/Input';\n// // import Messages from '../Messages/Messages';\n// // import TextContainer from '../TextContainer/TextContainer';\n// // import './Chat.css';\n\n// // let socket;\n\n// // const Chat = () => {\n// //     const location = useLocation();\n// //     const [name, setName] = useState('');\n// //     const [room, setRoom] = useState('');\n// //     const [users, setUsers] = useState([]); // Initialize users as an array\n// //     const [message, setMessage] = useState('');\n// //     const [messages, setMessages] = useState([]);\n// //     const [scheduleTime, setScheduleTime] = useState('');\n// //     const ENDPOINT = 'http://localhost:5000';\n\n// //     useEffect(() => {\n// //         const { name, room } = queryString.parse(location.search);\n// //         socket = io(ENDPOINT);\n// //         setName(name);\n// //         setRoom(room);\n\n// //         socket.emit('join', { name, room }, (error) => {\n// //             if (error) {\n// //                 alert(error);\n// //             }\n// //         });\n\n// //         // Set up message listener and room data listener\n// //         socket.on('message', (message) => {\n// //             setMessages((prevMessages) => [...prevMessages, message]);\n// //         });\n\n// //         socket.on(\"roomData\", ({ users }) => {\n// //             setUsers(users);\n// //         });\n\n// //         return () => {\n// //             socket.disconnect();\n// //             socket.off(); // Clean up the socket connection\n// //         };\n// //     }, [ENDPOINT, location.search]);\n\n// //     const sendMessage = (event) => {\n// //         event.preventDefault();\n// //         if (message) {\n// //             const currentTime = new Date();\n// //             const scheduledTime = new Date(scheduleTime);\n\n// //             // Check if the scheduled time is in the future\n// //             if (scheduledTime > currentTime) {\n// //                 const timeDiff = scheduledTime - currentTime;\n\n// //                 // Schedule sending the message\n// //                 setTimeout(() => {\n// //                     socket.emit('sendMessage', message, () => {\n// //                         setMessage('');\n// //                         setScheduleTime('');\n// //                     });\n// //                 }, timeDiff);\n// //             } else {\n// //                 // Send message immediately if no valid scheduled time\n// //                 socket.emit('sendMessage', message, () => {\n// //                     setMessage('');\n// //                     setScheduleTime('');\n// //                 });\n// //             }\n// //         }\n// //     };\n\n// //     return (\n// //         <div className='outerContainer'>\n// //             <div className='container'>\n// //                 <Infobar room={room} />\n// //                 <Messages messages={messages} name={name} />\n// //                 <Input \n// //                     message={message} \n// //                     setMessage={setMessage} \n// //                     sendMessage={sendMessage} \n// //                     scheduleTime={scheduleTime} \n// //                     setScheduleTime={setScheduleTime} \n// //                 />\n// //             </div>\n// //             <TextContainer users={users} />\n// //         </div>\n// //     );\n// // };\n\n// // export default Chat;\n\nimport React, { useEffect, useState } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport { useLocation } from 'react-router-dom';\nimport Infobar from '../Infobar/Infobar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport TextContainer from '../TextContainer/TextContainer';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\nconst Chat = () => {\n  _s();\n  const location = useLocation();\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState([]);\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [scheduleTime, setScheduleTime] = useState('');\n  const ENDPOINT = 'http://localhost:5000';\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room);\n    socket.emit('join', {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    });\n    socket.on('message', message => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n    socket.on(\"roomData\", ({\n      users\n    }) => {\n      setUsers(users);\n    });\n    socket.on('messageSeen', messageId => {\n      setMessages(prevMessages => {\n        return prevMessages.map((msg, index) => {\n          if (index === messageId) {\n            return {\n              ...msg,\n              seen: true\n            }; // Mark the message as seen\n          }\n          return msg;\n        });\n      });\n    });\n    return () => {\n      socket.disconnect();\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  const sendMessage = event => {\n    event.preventDefault();\n    if (message) {\n      const msgId = messages.length; // Generate a message ID based on the current message length\n      const msgObj = {\n        id: msgId,\n        user: name,\n        text: message,\n        seen: false\n      }; // Include id and seen status\n\n      socket.emit('sendMessage', msgObj, () => {\n        setMessage('');\n        setScheduleTime('');\n      });\n    }\n  };\n  const handleMessageSeen = messageIndex => {\n    socket.emit('seenMessage', messageIndex); // Emit seen event\n  };\n  useEffect(() => {\n    if (messages.length > 0) {\n      handleMessageSeen(messages.length - 1); // Mark the latest message as seen\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Infobar, {\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: sendMessage,\n        scheduleTime: scheduleTime,\n        setScheduleTime: setScheduleTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"s3r1+jCN5s8Td2BUEBQVSJDTq48=\", false, function () {\n  return [useLocation];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","queryString","io","useLocation","Infobar","Input","Messages","TextContainer","jsxDEV","_jsxDEV","socket","Chat","_s","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","scheduleTime","setScheduleTime","ENDPOINT","parse","search","emit","error","alert","on","prevMessages","messageId","map","msg","index","seen","disconnect","off","sendMessage","event","preventDefault","msgId","length","msgObj","id","user","text","handleMessageSeen","messageIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/vindi/OneDrive/Documents/whatschat/client/src/components/Chat/Chat.js"],"sourcesContent":["// // // // import React, { useEffect,useState } from 'react'\r\n// // // // import queryString from 'query-string';\r\n// // // // import io from 'socket.io-client';\r\n// // // // import { useLocation } from 'react-router-dom';\r\n// // // // import Infobar from '../Infobar/Infobar';\r\n// // // // import Input from '../Input/Input';\r\n// // // // import Messages from '../Messages/Messages';\r\n// // // // // import { eventNames } from 'process';\r\n// // // // import './Chat.css'\r\n\r\n// // // // let socket;\r\n\r\n// // // // const Chat=()=>{\r\n// // // //     const location = useLocation();\r\n// // // //     const [name,setName]=useState('');\r\n// // // //     const [room,setRoom]=useState('');\r\n// // // //     const [message,setMessage]=useState('');\r\n// // // //     const [messages,setMessages]=useState([]);\r\n// // // //     const ENDPOINT='localhost:5000'\r\n// // // //     useEffect(() => {\r\n// // // //         // if (location.search) { // Ensure location.search is defined\r\n// // // //             const {name,room} = queryString.parse(location.search);\r\n\r\n// // // //             socket=io(ENDPOINT);\r\n// // // //             setName(name);\r\n// // // //             setRoom(room); \r\n\r\n// // // //             socket.on('connect',()=>{\r\n// // // //                 console.log('Connected to the server');\r\n// // // //                 // socket.emit('join',{name,room},({error})=>{\r\n// // // //                 //     alert(error);\r\n// // // //                 // });\r\n// // // //                 socket.emit('join',{name,room},()=>{\r\n// // // //                 });\r\n// // // //             });\r\n// // // //             return ()=>{\r\n// // // //                 socket.disconnect();\r\n// // // //                 socket.off();\r\n// // // //             };\r\n\r\n            \r\n// // // //             // console.log(socket);  \r\n// // // //                   // logs the parsed object\r\n// // // //         // }\r\n// // // //     }, [ENDPOINT,location.search]);\r\n\r\n// // // //     useEffect(()=>{\r\n// // // //         socket.on('message',message=>{\r\n// // // //             setMessages(messages=>[...messages,message]);        \r\n// // // //         })\r\n// // // //     },[messages]);\r\n\r\n\r\n// // // // const sendMessage=(event)=>{\r\n// // // //     event.preventDefault();\r\n// // // //     if(message){\r\n// // // //         socket.emit('sendMessage',message,()=>{\r\n// // // //             setMessage('')\r\n// // // //         })\r\n// // // //     }\r\n// // // // }\r\n// // // // console.log(message,messages);\r\n\r\n// // // //     return (<div className='outerContainer'>\r\n// // // //         <div className='container'>\r\n// // // //             <Infobar room={room}/>\r\n// // // //             <Input message={message} setMessage={setMessage} sendMessage={sendMessage}/>\r\n// // // //             <Messages messages={messages}/>\r\n// // // //         </div>\r\n// // // //     </div>);\r\n    \r\n    \r\n// // // // };\r\n// // // // export default Chat; \r\n\r\n\r\n// // // import React, { useEffect, useState } from 'react';\r\n// // // import queryString from 'query-string';\r\n// // // import io from 'socket.io-client';\r\n// // // import { useLocation } from 'react-router-dom';\r\n// // // import Infobar from '../Infobar/Infobar';\r\n// // // import Input from '../Input/Input';\r\n// // // import Messages from '../Messages/Messages';\r\n// // // import './Chat.css';\r\n\r\n// // // let socket;\r\n\r\n// // // const Chat = () => {\r\n// // //     const location = useLocation();\r\n// // //     const [name, setName] = useState('');\r\n// // //     const [room, setRoom] = useState('');\r\n// // //     const [message, setMessage] = useState('');\r\n// // //     const [messages, setMessages] = useState([]);\r\n// // //     const ENDPOINT = 'http://localhost:5000'; // Make sure to include the protocol (http://)\r\n\r\n// // //     useEffect(() => {\r\n// // //         const { name, room } = queryString.parse(location.search);\r\n// // //         socket = io(ENDPOINT);\r\n// // //         setName(name);\r\n// // //         setRoom(room);\r\n\r\n// // //         socket.emit('join', { name, room }, (error) => {\r\n// // //             if (error) {\r\n// // //                 alert(error);\r\n// // //             }\r\n// // //         });\r\n\r\n// // //         // Set up the message listener\r\n// // //         socket.on('message', (message) => {\r\n// // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // //         });\r\n\r\n// // //         return () => {\r\n// // //             socket.disconnect();\r\n// // //             socket.off(); // Clean up the socket connection\r\n// // //         };\r\n// // //     }, [ENDPOINT, location.search]); // Only set up the socket on these changes\r\n\r\n// // //     const sendMessage = (event) => {\r\n// // //         event.preventDefault();\r\n// // //         if (message) {\r\n// // //             socket.emit('sendMessage', message, () => {\r\n// // //                 setMessage('');\r\n// // //             });\r\n// // //         }\r\n// // //     };\r\n\r\n// // //     return (\r\n// // //         <div className='outerContainer'>\r\n// // //             <div className='container'>\r\n// // //                 <Infobar room={room} />\r\n// // //                 <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n// // //                 <Messages messages={messages} name={name} /> {/* Ensure name is passed if needed */}\r\n// // //             </div>\r\n// // //         </div>\r\n// // //     );\r\n// // // };\r\n\r\n// // // export default Chat;\r\n\r\n\r\n\r\n\r\n\r\n// // import React, { useEffect, useState } from 'react';\r\n// // import queryString from 'query-string';\r\n// // import io from 'socket.io-client';\r\n// // import { useLocation } from 'react-router-dom';\r\n// // import Infobar from '../Infobar/Infobar';\r\n// // import Input from '../Input/Input';\r\n// // import Messages from '../Messages/Messages';\r\n// // import TextContainer from '../TextContainer/TextContainer';\r\n// // import './Chat.css';\r\n\r\n// // let socket;\r\n\r\n// // const Chat = () => {\r\n// //     const location = useLocation();\r\n// //     const [name, setName] = useState('');\r\n// //     const [room, setRoom] = useState('');\r\n// //     const [users, setUsers] = useState([]); // Initialize users as an array\r\n// //     const [message, setMessage] = useState('');\r\n// //     const [messages, setMessages] = useState([]);\r\n// //     const [scheduleTime, setScheduleTime] = useState('');\r\n// //     const ENDPOINT = 'http://localhost:5000';\r\n\r\n// //     useEffect(() => {\r\n// //         const { name, room } = queryString.parse(location.search);\r\n// //         socket = io(ENDPOINT);\r\n// //         setName(name);\r\n// //         setRoom(room);\r\n\r\n// //         socket.emit('join', { name, room }, (error) => {\r\n// //             if (error) {\r\n// //                 alert(error);\r\n// //             }\r\n// //         });\r\n\r\n// //         // Set up message listener and room data listener\r\n// //         socket.on('message', (message) => {\r\n// //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// //         });\r\n\r\n// //         socket.on(\"roomData\", ({ users }) => {\r\n// //             setUsers(users);\r\n// //         });\r\n\r\n// //         return () => {\r\n// //             socket.disconnect();\r\n// //             socket.off(); // Clean up the socket connection\r\n// //         };\r\n// //     }, [ENDPOINT, location.search]);\r\n\r\n// //     const sendMessage = (event) => {\r\n// //         event.preventDefault();\r\n// //         if (message) {\r\n// //             const currentTime = new Date();\r\n// //             const scheduledTime = new Date(scheduleTime);\r\n\r\n// //             // Check if the scheduled time is in the future\r\n// //             if (scheduledTime > currentTime) {\r\n// //                 const timeDiff = scheduledTime - currentTime;\r\n\r\n// //                 // Schedule sending the message\r\n// //                 setTimeout(() => {\r\n// //                     socket.emit('sendMessage', message, () => {\r\n// //                         setMessage('');\r\n// //                         setScheduleTime('');\r\n// //                     });\r\n// //                 }, timeDiff);\r\n// //             } else {\r\n// //                 // Send message immediately if no valid scheduled time\r\n// //                 socket.emit('sendMessage', message, () => {\r\n// //                     setMessage('');\r\n// //                     setScheduleTime('');\r\n// //                 });\r\n// //             }\r\n// //         }\r\n// //     };\r\n\r\n// //     return (\r\n// //         <div className='outerContainer'>\r\n// //             <div className='container'>\r\n// //                 <Infobar room={room} />\r\n// //                 <Messages messages={messages} name={name} />\r\n// //                 <Input \r\n// //                     message={message} \r\n// //                     setMessage={setMessage} \r\n// //                     sendMessage={sendMessage} \r\n// //                     scheduleTime={scheduleTime} \r\n// //                     setScheduleTime={setScheduleTime} \r\n// //                 />\r\n// //             </div>\r\n// //             <TextContainer users={users} />\r\n// //         </div>\r\n// //     );\r\n// // };\r\n\r\n// // export default Chat;\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Infobar from '../Infobar/Infobar';\r\nimport Input from '../Input/Input';\r\nimport Messages from '../Messages/Messages';\r\nimport TextContainer from '../TextContainer/TextContainer';\r\nimport './Chat.css';\r\n\r\nlet socket;\r\n\r\nconst Chat = () => {\r\n    const location = useLocation();\r\n    const [name, setName] = useState('');\r\n    const [room, setRoom] = useState('');\r\n    const [users, setUsers] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [scheduleTime, setScheduleTime] = useState('');\r\n    const ENDPOINT = 'http://localhost:5000';\r\n\r\n    useEffect(() => {\r\n        const { name, room } = queryString.parse(location.search);\r\n        socket = io(ENDPOINT);\r\n        setName(name);\r\n        setRoom(room);\r\n\r\n        socket.emit('join', { name, room }, (error) => {\r\n            if (error) {\r\n                alert(error);\r\n            }\r\n        });\r\n\r\n        socket.on('message', (message) => {\r\n            setMessages((prevMessages) => [...prevMessages, message]);\r\n        });\r\n\r\n        socket.on(\"roomData\", ({ users }) => {\r\n            setUsers(users);\r\n        });\r\n\r\n        socket.on('messageSeen', (messageId) => {\r\n            setMessages((prevMessages) => {\r\n                return prevMessages.map((msg, index) => {\r\n                    if (index === messageId) {\r\n                        return { ...msg, seen: true }; // Mark the message as seen\r\n                    }\r\n                    return msg;\r\n                });\r\n            });\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n            socket.off();\r\n        };\r\n    }, [ENDPOINT, location.search]);\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n        if (message) {\r\n            const msgId = messages.length; // Generate a message ID based on the current message length\r\n            const msgObj = { id: msgId, user: name, text: message, seen: false }; // Include id and seen status\r\n\r\n            socket.emit('sendMessage', msgObj, () => {\r\n                setMessage('');\r\n                setScheduleTime('');\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleMessageSeen = (messageIndex) => {\r\n        socket.emit('seenMessage', messageIndex); // Emit seen event\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (messages.length > 0) {\r\n            handleMessageSeen(messages.length - 1); // Mark the latest message as seen\r\n        }\r\n    }, [messages]);\r\n\r\n    return (\r\n        <div className='outerContainer'>\r\n            <div className='container'>\r\n                <Infobar room={room} />\r\n                <Messages messages={messages} name={name} />\r\n                <Input \r\n                    message={message} \r\n                    setMessage={setMessage} \r\n                    sendMessage={sendMessage} \r\n                    scheduleTime={scheduleTime} \r\n                    setScheduleTime={setScheduleTime} \r\n                />\r\n            </div>\r\n            <TextContainer users={users} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,cAAc;AACtC,OAAOC,EAAE,MAAM,kBAAkB;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}