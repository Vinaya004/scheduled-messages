{"ast":null,"code":"// // import React, { useEffect,useState } from 'react'\n// // import queryString from 'query-string';\n// // import io from 'socket.io-client';\n// // import { useLocation } from 'react-router-dom';\n// // import Infobar from '../Infobar/Infobar';\n// // import Input from '../Input/Input';\n// // import Messages from '../Messages/Messages';\n// // // import { eventNames } from 'process';\n// // import './Chat.css'\n\n// // let socket;\n\n// // const Chat=()=>{\n// //     const location = useLocation();\n// //     const [name,setName]=useState('');\n// //     const [room,setRoom]=useState('');\n// //     const [message,setMessage]=useState('');\n// //     const [messages,setMessages]=useState([]);\n// //     const ENDPOINT='localhost:5000'\n// //     useEffect(() => {\n// //         // if (location.search) { // Ensure location.search is defined\n// //             const {name,room} = queryString.parse(location.search);\n\n// //             socket=io(ENDPOINT);\n// //             setName(name);\n// //             setRoom(room); \n\n// //             socket.on('connect',()=>{\n// //                 console.log('Connected to the server');\n// //                 // socket.emit('join',{name,room},({error})=>{\n// //                 //     alert(error);\n// //                 // });\n// //                 socket.emit('join',{name,room},()=>{\n// //                 });\n// //             });\n// //             return ()=>{\n// //                 socket.disconnect();\n// //                 socket.off();\n// //             };\n\n// //             // console.log(socket);  \n// //                   // logs the parsed object\n// //         // }\n// //     }, [ENDPOINT,location.search]);\n\n// //     useEffect(()=>{\n// //         socket.on('message',message=>{\n// //             setMessages(messages=>[...messages,message]);        \n// //         })\n// //     },[messages]);\n\n// // const sendMessage=(event)=>{\n// //     event.preventDefault();\n// //     if(message){\n// //         socket.emit('sendMessage',message,()=>{\n// //             setMessage('')\n// //         })\n// //     }\n// // }\n// // console.log(message,messages);\n\n// //     return (<div className='outerContainer'>\n// //         <div className='container'>\n// //             <Infobar room={room}/>\n// //             <Input message={message} setMessage={setMessage} sendMessage={sendMessage}/>\n// //             <Messages messages={messages}/>\n// //         </div>\n// //     </div>);\n\n// // };\n// // export default Chat; \n\n// import React, { useEffect, useState } from 'react';\n// import queryString from 'query-string';\n// import io from 'socket.io-client';\n// import { useLocation } from 'react-router-dom';\n// import Infobar from '../Infobar/Infobar';\n// import Input from '../Input/Input';\n// import Messages from '../Messages/Messages';\n// import './Chat.css';\n\n// let socket;\n\n// const Chat = () => {\n//     const location = useLocation();\n//     const [name, setName] = useState('');\n//     const [room, setRoom] = useState('');\n//     const [message, setMessage] = useState('');\n//     const [messages, setMessages] = useState([]);\n//     const ENDPOINT = 'http://localhost:5000'; // Make sure to include the protocol (http://)\n\n//     useEffect(() => {\n//         const { name, room } = queryString.parse(location.search);\n//         socket = io(ENDPOINT);\n//         setName(name);\n//         setRoom(room);\n\n//         socket.emit('join', { name, room }, (error) => {\n//             if (error) {\n//                 alert(error);\n//             }\n//         });\n\n//         // Set up the message listener\n//         socket.on('message', (message) => {\n//             setMessages((prevMessages) => [...prevMessages, message]);\n//         });\n\n//         return () => {\n//             socket.disconnect();\n//             socket.off(); // Clean up the socket connection\n//         };\n//     }, [ENDPOINT, location.search]); // Only set up the socket on these changes\n\n//     const sendMessage = (event) => {\n//         event.preventDefault();\n//         if (message) {\n//             socket.emit('sendMessage', message, () => {\n//                 setMessage('');\n//             });\n//         }\n//     };\n\n//     return (\n//         <div className='outerContainer'>\n//             <div className='container'>\n//                 <Infobar room={room} />\n//                 <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n//                 <Messages messages={messages} name={name} /> {/* Ensure name is passed if needed */}\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chat;","map":{"version":3,"names":[],"sources":["C:/Users/vindi/OneDrive/Documents/whatschat/client/src/components/Chat/Chat.js"],"sourcesContent":["// // import React, { useEffect,useState } from 'react'\r\n// // import queryString from 'query-string';\r\n// // import io from 'socket.io-client';\r\n// // import { useLocation } from 'react-router-dom';\r\n// // import Infobar from '../Infobar/Infobar';\r\n// // import Input from '../Input/Input';\r\n// // import Messages from '../Messages/Messages';\r\n// // // import { eventNames } from 'process';\r\n// // import './Chat.css'\r\n\r\n// // let socket;\r\n\r\n// // const Chat=()=>{\r\n// //     const location = useLocation();\r\n// //     const [name,setName]=useState('');\r\n// //     const [room,setRoom]=useState('');\r\n// //     const [message,setMessage]=useState('');\r\n// //     const [messages,setMessages]=useState([]);\r\n// //     const ENDPOINT='localhost:5000'\r\n// //     useEffect(() => {\r\n// //         // if (location.search) { // Ensure location.search is defined\r\n// //             const {name,room} = queryString.parse(location.search);\r\n\r\n// //             socket=io(ENDPOINT);\r\n// //             setName(name);\r\n// //             setRoom(room); \r\n\r\n// //             socket.on('connect',()=>{\r\n// //                 console.log('Connected to the server');\r\n// //                 // socket.emit('join',{name,room},({error})=>{\r\n// //                 //     alert(error);\r\n// //                 // });\r\n// //                 socket.emit('join',{name,room},()=>{\r\n// //                 });\r\n// //             });\r\n// //             return ()=>{\r\n// //                 socket.disconnect();\r\n// //                 socket.off();\r\n// //             };\r\n\r\n            \r\n// //             // console.log(socket);  \r\n// //                   // logs the parsed object\r\n// //         // }\r\n// //     }, [ENDPOINT,location.search]);\r\n\r\n// //     useEffect(()=>{\r\n// //         socket.on('message',message=>{\r\n// //             setMessages(messages=>[...messages,message]);        \r\n// //         })\r\n// //     },[messages]);\r\n\r\n\r\n// // const sendMessage=(event)=>{\r\n// //     event.preventDefault();\r\n// //     if(message){\r\n// //         socket.emit('sendMessage',message,()=>{\r\n// //             setMessage('')\r\n// //         })\r\n// //     }\r\n// // }\r\n// // console.log(message,messages);\r\n\r\n// //     return (<div className='outerContainer'>\r\n// //         <div className='container'>\r\n// //             <Infobar room={room}/>\r\n// //             <Input message={message} setMessage={setMessage} sendMessage={sendMessage}/>\r\n// //             <Messages messages={messages}/>\r\n// //         </div>\r\n// //     </div>);\r\n    \r\n    \r\n// // };\r\n// // export default Chat; \r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import queryString from 'query-string';\r\n// import io from 'socket.io-client';\r\n// import { useLocation } from 'react-router-dom';\r\n// import Infobar from '../Infobar/Infobar';\r\n// import Input from '../Input/Input';\r\n// import Messages from '../Messages/Messages';\r\n// import './Chat.css';\r\n\r\n// let socket;\r\n\r\n// const Chat = () => {\r\n//     const location = useLocation();\r\n//     const [name, setName] = useState('');\r\n//     const [room, setRoom] = useState('');\r\n//     const [message, setMessage] = useState('');\r\n//     const [messages, setMessages] = useState([]);\r\n//     const ENDPOINT = 'http://localhost:5000'; // Make sure to include the protocol (http://)\r\n\r\n//     useEffect(() => {\r\n//         const { name, room } = queryString.parse(location.search);\r\n//         socket = io(ENDPOINT);\r\n//         setName(name);\r\n//         setRoom(room);\r\n\r\n//         socket.emit('join', { name, room }, (error) => {\r\n//             if (error) {\r\n//                 alert(error);\r\n//             }\r\n//         });\r\n\r\n//         // Set up the message listener\r\n//         socket.on('message', (message) => {\r\n//             setMessages((prevMessages) => [...prevMessages, message]);\r\n//         });\r\n\r\n//         return () => {\r\n//             socket.disconnect();\r\n//             socket.off(); // Clean up the socket connection\r\n//         };\r\n//     }, [ENDPOINT, location.search]); // Only set up the socket on these changes\r\n\r\n//     const sendMessage = (event) => {\r\n//         event.preventDefault();\r\n//         if (message) {\r\n//             socket.emit('sendMessage', message, () => {\r\n//                 setMessage('');\r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className='outerContainer'>\r\n//             <div className='container'>\r\n//                 <Infobar room={room} />\r\n//                 <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n//                 <Messages messages={messages} name={name} /> {/* Ensure name is passed if needed */}\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Chat;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}