{"ast":null,"code":"// // // // import React, { useEffect,useState } from 'react'\n// // // // import queryString from 'query-string';\n// // // // import io from 'socket.io-client';\n// // // // import { useLocation } from 'react-router-dom';\n// // // // import Infobar from '../Infobar/Infobar';\n// // // // import Input from '../Input/Input';\n// // // // import Messages from '../Messages/Messages';\n// // // // // import { eventNames } from 'process';\n// // // // import './Chat.css'\n\n// // // // let socket;\n\n// // // // const Chat=()=>{\n// // // //     const location = useLocation();\n// // // //     const [name,setName]=useState('');\n// // // //     const [room,setRoom]=useState('');\n// // // //     const [message,setMessage]=useState('');\n// // // //     const [messages,setMessages]=useState([]);\n// // // //     const ENDPOINT='localhost:5000'\n// // // //     useEffect(() => {\n// // // //         // if (location.search) { // Ensure location.search is defined\n// // // //             const {name,room} = queryString.parse(location.search);\n\n// // // //             socket=io(ENDPOINT);\n// // // //             setName(name);\n// // // //             setRoom(room); \n\n// // // //             socket.on('connect',()=>{\n// // // //                 console.log('Connected to the server');\n// // // //                 // socket.emit('join',{name,room},({error})=>{\n// // // //                 //     alert(error);\n// // // //                 // });\n// // // //                 socket.emit('join',{name,room},()=>{\n// // // //                 });\n// // // //             });\n// // // //             return ()=>{\n// // // //                 socket.disconnect();\n// // // //                 socket.off();\n// // // //             };\n\n// // // //             // console.log(socket);  \n// // // //                   // logs the parsed object\n// // // //         // }\n// // // //     }, [ENDPOINT,location.search]);\n\n// // // //     useEffect(()=>{\n// // // //         socket.on('message',message=>{\n// // // //             setMessages(messages=>[...messages,message]);        \n// // // //         })\n// // // //     },[messages]);\n\n// // // // const sendMessage=(event)=>{\n// // // //     event.preventDefault();\n// // // //     if(message){\n// // // //         socket.emit('sendMessage',message,()=>{\n// // // //             setMessage('')\n// // // //         })\n// // // //     }\n// // // // }\n// // // // console.log(message,messages);\n\n// // // //     return (<div className='outerContainer'>\n// // // //         <div className='container'>\n// // // //             <Infobar room={room}/>\n// // // //             <Input message={message} setMessage={setMessage} sendMessage={sendMessage}/>\n// // // //             <Messages messages={messages}/>\n// // // //         </div>\n// // // //     </div>);\n\n// // // // };\n// // // // export default Chat; \n\n// // // import React, { useEffect, useState } from 'react';\n// // // import queryString from 'query-string';\n// // // import io from 'socket.io-client';\n// // // import { useLocation } from 'react-router-dom';\n// // // import Infobar from '../Infobar/Infobar';\n// // // import Input from '../Input/Input';\n// // // import Messages from '../Messages/Messages';\n// // // import './Chat.css';\n\n// // // let socket;\n\n// // // const Chat = () => {\n// // //     const location = useLocation();\n// // //     const [name, setName] = useState('');\n// // //     const [room, setRoom] = useState('');\n// // //     const [message, setMessage] = useState('');\n// // //     const [messages, setMessages] = useState([]);\n// // //     const ENDPOINT = 'http://localhost:5000'; // Make sure to include the protocol (http://)\n\n// // //     useEffect(() => {\n// // //         const { name, room } = queryString.parse(location.search);\n// // //         socket = io(ENDPOINT);\n// // //         setName(name);\n// // //         setRoom(room);\n\n// // //         socket.emit('join', { name, room }, (error) => {\n// // //             if (error) {\n// // //                 alert(error);\n// // //             }\n// // //         });\n\n// // //         // Set up the message listener\n// // //         socket.on('message', (message) => {\n// // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // //         });\n\n// // //         return () => {\n// // //             socket.disconnect();\n// // //             socket.off(); // Clean up the socket connection\n// // //         };\n// // //     }, [ENDPOINT, location.search]); // Only set up the socket on these changes\n\n// // //     const sendMessage = (event) => {\n// // //         event.preventDefault();\n// // //         if (message) {\n// // //             socket.emit('sendMessage', message, () => {\n// // //                 setMessage('');\n// // //             });\n// // //         }\n// // //     };\n\n// // //     return (\n// // //         <div className='outerContainer'>\n// // //             <div className='container'>\n// // //                 <Infobar room={room} />\n// // //                 <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n// // //                 <Messages messages={messages} name={name} /> {/* Ensure name is passed if needed */}\n// // //             </div>\n// // //         </div>\n// // //     );\n// // // };\n\n// // // export default Chat;\n\n// // import React, { useEffect, useState } from 'react';\n// // import queryString from 'query-string';\n// // import io from 'socket.io-client';\n// // import { useLocation } from 'react-router-dom';\n// // import Infobar from '../Infobar/Infobar';\n// // import Input from '../Input/Input';\n// // import Messages from '../Messages/Messages';\n// // import TextContainer from '../TextContainer/TextContainer';\n// // import './Chat.css';\n\n// // let socket;\n\n// // const Chat = () => {\n// //     const location = useLocation();\n// //     const [name, setName] = useState('');\n// //     const [room, setRoom] = useState('');\n// //     const [users, setUsers] = useState([]); // Initialize users as an array\n// //     const [message, setMessage] = useState('');\n// //     const [messages, setMessages] = useState([]);\n// //     const [scheduleTime, setScheduleTime] = useState('');\n// //     const ENDPOINT = 'http://localhost:5000';\n\n// //     useEffect(() => {\n// //         const { name, room } = queryString.parse(location.search);\n// //         socket = io(ENDPOINT);\n// //         setName(name);\n// //         setRoom(room);\n\n// //         socket.emit('join', { name, room }, (error) => {\n// //             if (error) {\n// //                 alert(error);\n// //             }\n// //         });\n\n// //         // Set up message listener and room data listener\n// //         socket.on('message', (message) => {\n// //             setMessages((prevMessages) => [...prevMessages, message]);\n// //         });\n\n// //         socket.on(\"roomData\", ({ users }) => {\n// //             setUsers(users);\n// //         });\n\n// //         return () => {\n// //             socket.disconnect();\n// //             socket.off(); // Clean up the socket connection\n// //         };\n// //     }, [ENDPOINT, location.search]);\n\n// //     const sendMessage = (event) => {\n// //         event.preventDefault();\n// //         if (message) {\n// //             const currentTime = new Date();\n// //             const scheduledTime = new Date(scheduleTime);\n\n// //             // Check if the scheduled time is in the future\n// //             if (scheduledTime > currentTime) {\n// //                 const timeDiff = scheduledTime - currentTime;\n\n// //                 // Schedule sending the message\n// //                 setTimeout(() => {\n// //                     socket.emit('sendMessage', message, () => {\n// //                         setMessage('');\n// //                         setScheduleTime('');\n// //                     });\n// //                 }, timeDiff);\n// //             } else {\n// //                 // Send message immediately if no valid scheduled time\n// //                 socket.emit('sendMessage', message, () => {\n// //                     setMessage('');\n// //                     setScheduleTime('');\n// //                 });\n// //             }\n// //         }\n// //     };\n\n// //     return (\n// //         <div className='outerContainer'>\n// //             <div className='container'>\n// //                 <Infobar room={room} />\n// //                 <Messages messages={messages} name={name} />\n// //                 <Input \n// //                     message={message} \n// //                     setMessage={setMessage} \n// //                     sendMessage={sendMessage} \n// //                     scheduleTime={scheduleTime} \n// //                     setScheduleTime={setScheduleTime} \n// //                 />\n// //             </div>\n// //             <TextContainer users={users} />\n// //         </div>\n// //     );\n// // };\n\n// // export default Chat;\n\n// import React, { useEffect, useState } from 'react';\n// import queryString from 'query-string';\n// import io from 'socket.io-client';\n// import { useLocation } from 'react-router-dom';\n// import Infobar from '../Infobar/Infobar';\n// import Input from '../Input/Input';\n// import Messages from '../Messages/Messages';\n// import TextContainer from '../TextContainer/TextContainer';\n// import './Chat.css';\n\n// let socket;\n\n// const Chat = () => {\n//     const location = useLocation();\n//     const [name, setName] = useState('');\n//     const [room, setRoom] = useState('');\n//     const [users, setUsers] = useState([]);\n//     const [message, setMessage] = useState('');\n//     const [messages, setMessages] = useState([]);\n//     const [scheduleTime, setScheduleTime] = useState('');\n//     const ENDPOINT = 'http://localhost:5000';\n\n//     useEffect(() => {\n//         const { name, room } = queryString.parse(location.search);\n//         socket = io(ENDPOINT);\n//         setName(name);\n//         setRoom(room);\n\n//         socket.emit('join', { name, room }, (error) => {\n//             if (error) {\n//                 alert(error);\n//             }\n//         });\n\n//         socket.on('message', (message) => {\n//             setMessages((prevMessages) => [...prevMessages, message]);\n//         });\n\n//         socket.on(\"roomData\", ({ users }) => {\n//             setUsers(users);\n//         });\n\n//         socket.on('messageSeen', (messageId) => {\n//             setMessages((prevMessages) => {\n//                 return prevMessages.map((msg, index) => {\n//                     if (index === messageId) {\n//                         return { ...msg, seen: true }; // Mark the message as seen\n//                     }\n//                     return msg;\n//                 });\n//             });\n//         });\n\n//         return () => {\n//             socket.disconnect();\n//             socket.off();\n//         };\n//     }, [ENDPOINT, location.search]);\n\n//     const sendMessage = (event) => {\n//         event.preventDefault();\n//         if (message) {\n//             const msgId = messages.length; // Generate a message ID based on the current message length\n//             const msgObj = { id: msgId, user: name, text: message, seen: false }; // Include id and seen status\n\n//             socket.emit('sendMessage', msgObj, () => {\n//                 setMessage('');\n//                 setScheduleTime('');\n//             });\n//         }\n//     };\n\n//     const handleMessageSeen = (messageIndex) => {\n//         socket.emit('seenMessage', messageIndex); // Emit seen event\n//     };\n\n//     useEffect(() => {\n//         if (messages.length > 0) {\n//             handleMessageSeen(messages.length - 1); // Mark the latest message as seen\n//         }\n//     }, [messages]);\n\n//     return (\n//         <div className='outerContainer'>\n//             <div className='container'>\n//                 <Infobar room={room} />\n//                 <Messages messages={messages} name={name} />\n//                 <Input \n//                     message={message} \n//                     setMessage={setMessage} \n//                     sendMessage={sendMessage} \n//                     scheduleTime={scheduleTime} \n//                     setScheduleTime={setScheduleTime} \n//                 />\n//             </div>\n//             <TextContainer users={users} />\n//         </div>\n//     );\n// };\n\n// export default Chat;","map":{"version":3,"names":[],"sources":["C:/Users/vindi/OneDrive/Documents/whatschat/client/src/components/Chat/Chat.js"],"sourcesContent":["// // // // import React, { useEffect,useState } from 'react'\r\n// // // // import queryString from 'query-string';\r\n// // // // import io from 'socket.io-client';\r\n// // // // import { useLocation } from 'react-router-dom';\r\n// // // // import Infobar from '../Infobar/Infobar';\r\n// // // // import Input from '../Input/Input';\r\n// // // // import Messages from '../Messages/Messages';\r\n// // // // // import { eventNames } from 'process';\r\n// // // // import './Chat.css'\r\n\r\n// // // // let socket;\r\n\r\n// // // // const Chat=()=>{\r\n// // // //     const location = useLocation();\r\n// // // //     const [name,setName]=useState('');\r\n// // // //     const [room,setRoom]=useState('');\r\n// // // //     const [message,setMessage]=useState('');\r\n// // // //     const [messages,setMessages]=useState([]);\r\n// // // //     const ENDPOINT='localhost:5000'\r\n// // // //     useEffect(() => {\r\n// // // //         // if (location.search) { // Ensure location.search is defined\r\n// // // //             const {name,room} = queryString.parse(location.search);\r\n\r\n// // // //             socket=io(ENDPOINT);\r\n// // // //             setName(name);\r\n// // // //             setRoom(room); \r\n\r\n// // // //             socket.on('connect',()=>{\r\n// // // //                 console.log('Connected to the server');\r\n// // // //                 // socket.emit('join',{name,room},({error})=>{\r\n// // // //                 //     alert(error);\r\n// // // //                 // });\r\n// // // //                 socket.emit('join',{name,room},()=>{\r\n// // // //                 });\r\n// // // //             });\r\n// // // //             return ()=>{\r\n// // // //                 socket.disconnect();\r\n// // // //                 socket.off();\r\n// // // //             };\r\n\r\n            \r\n// // // //             // console.log(socket);  \r\n// // // //                   // logs the parsed object\r\n// // // //         // }\r\n// // // //     }, [ENDPOINT,location.search]);\r\n\r\n// // // //     useEffect(()=>{\r\n// // // //         socket.on('message',message=>{\r\n// // // //             setMessages(messages=>[...messages,message]);        \r\n// // // //         })\r\n// // // //     },[messages]);\r\n\r\n\r\n// // // // const sendMessage=(event)=>{\r\n// // // //     event.preventDefault();\r\n// // // //     if(message){\r\n// // // //         socket.emit('sendMessage',message,()=>{\r\n// // // //             setMessage('')\r\n// // // //         })\r\n// // // //     }\r\n// // // // }\r\n// // // // console.log(message,messages);\r\n\r\n// // // //     return (<div className='outerContainer'>\r\n// // // //         <div className='container'>\r\n// // // //             <Infobar room={room}/>\r\n// // // //             <Input message={message} setMessage={setMessage} sendMessage={sendMessage}/>\r\n// // // //             <Messages messages={messages}/>\r\n// // // //         </div>\r\n// // // //     </div>);\r\n    \r\n    \r\n// // // // };\r\n// // // // export default Chat; \r\n\r\n\r\n// // // import React, { useEffect, useState } from 'react';\r\n// // // import queryString from 'query-string';\r\n// // // import io from 'socket.io-client';\r\n// // // import { useLocation } from 'react-router-dom';\r\n// // // import Infobar from '../Infobar/Infobar';\r\n// // // import Input from '../Input/Input';\r\n// // // import Messages from '../Messages/Messages';\r\n// // // import './Chat.css';\r\n\r\n// // // let socket;\r\n\r\n// // // const Chat = () => {\r\n// // //     const location = useLocation();\r\n// // //     const [name, setName] = useState('');\r\n// // //     const [room, setRoom] = useState('');\r\n// // //     const [message, setMessage] = useState('');\r\n// // //     const [messages, setMessages] = useState([]);\r\n// // //     const ENDPOINT = 'http://localhost:5000'; // Make sure to include the protocol (http://)\r\n\r\n// // //     useEffect(() => {\r\n// // //         const { name, room } = queryString.parse(location.search);\r\n// // //         socket = io(ENDPOINT);\r\n// // //         setName(name);\r\n// // //         setRoom(room);\r\n\r\n// // //         socket.emit('join', { name, room }, (error) => {\r\n// // //             if (error) {\r\n// // //                 alert(error);\r\n// // //             }\r\n// // //         });\r\n\r\n// // //         // Set up the message listener\r\n// // //         socket.on('message', (message) => {\r\n// // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // //         });\r\n\r\n// // //         return () => {\r\n// // //             socket.disconnect();\r\n// // //             socket.off(); // Clean up the socket connection\r\n// // //         };\r\n// // //     }, [ENDPOINT, location.search]); // Only set up the socket on these changes\r\n\r\n// // //     const sendMessage = (event) => {\r\n// // //         event.preventDefault();\r\n// // //         if (message) {\r\n// // //             socket.emit('sendMessage', message, () => {\r\n// // //                 setMessage('');\r\n// // //             });\r\n// // //         }\r\n// // //     };\r\n\r\n// // //     return (\r\n// // //         <div className='outerContainer'>\r\n// // //             <div className='container'>\r\n// // //                 <Infobar room={room} />\r\n// // //                 <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n// // //                 <Messages messages={messages} name={name} /> {/* Ensure name is passed if needed */}\r\n// // //             </div>\r\n// // //         </div>\r\n// // //     );\r\n// // // };\r\n\r\n// // // export default Chat;\r\n\r\n\r\n\r\n\r\n\r\n// // import React, { useEffect, useState } from 'react';\r\n// // import queryString from 'query-string';\r\n// // import io from 'socket.io-client';\r\n// // import { useLocation } from 'react-router-dom';\r\n// // import Infobar from '../Infobar/Infobar';\r\n// // import Input from '../Input/Input';\r\n// // import Messages from '../Messages/Messages';\r\n// // import TextContainer from '../TextContainer/TextContainer';\r\n// // import './Chat.css';\r\n\r\n// // let socket;\r\n\r\n// // const Chat = () => {\r\n// //     const location = useLocation();\r\n// //     const [name, setName] = useState('');\r\n// //     const [room, setRoom] = useState('');\r\n// //     const [users, setUsers] = useState([]); // Initialize users as an array\r\n// //     const [message, setMessage] = useState('');\r\n// //     const [messages, setMessages] = useState([]);\r\n// //     const [scheduleTime, setScheduleTime] = useState('');\r\n// //     const ENDPOINT = 'http://localhost:5000';\r\n\r\n// //     useEffect(() => {\r\n// //         const { name, room } = queryString.parse(location.search);\r\n// //         socket = io(ENDPOINT);\r\n// //         setName(name);\r\n// //         setRoom(room);\r\n\r\n// //         socket.emit('join', { name, room }, (error) => {\r\n// //             if (error) {\r\n// //                 alert(error);\r\n// //             }\r\n// //         });\r\n\r\n// //         // Set up message listener and room data listener\r\n// //         socket.on('message', (message) => {\r\n// //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// //         });\r\n\r\n// //         socket.on(\"roomData\", ({ users }) => {\r\n// //             setUsers(users);\r\n// //         });\r\n\r\n// //         return () => {\r\n// //             socket.disconnect();\r\n// //             socket.off(); // Clean up the socket connection\r\n// //         };\r\n// //     }, [ENDPOINT, location.search]);\r\n\r\n// //     const sendMessage = (event) => {\r\n// //         event.preventDefault();\r\n// //         if (message) {\r\n// //             const currentTime = new Date();\r\n// //             const scheduledTime = new Date(scheduleTime);\r\n\r\n// //             // Check if the scheduled time is in the future\r\n// //             if (scheduledTime > currentTime) {\r\n// //                 const timeDiff = scheduledTime - currentTime;\r\n\r\n// //                 // Schedule sending the message\r\n// //                 setTimeout(() => {\r\n// //                     socket.emit('sendMessage', message, () => {\r\n// //                         setMessage('');\r\n// //                         setScheduleTime('');\r\n// //                     });\r\n// //                 }, timeDiff);\r\n// //             } else {\r\n// //                 // Send message immediately if no valid scheduled time\r\n// //                 socket.emit('sendMessage', message, () => {\r\n// //                     setMessage('');\r\n// //                     setScheduleTime('');\r\n// //                 });\r\n// //             }\r\n// //         }\r\n// //     };\r\n\r\n// //     return (\r\n// //         <div className='outerContainer'>\r\n// //             <div className='container'>\r\n// //                 <Infobar room={room} />\r\n// //                 <Messages messages={messages} name={name} />\r\n// //                 <Input \r\n// //                     message={message} \r\n// //                     setMessage={setMessage} \r\n// //                     sendMessage={sendMessage} \r\n// //                     scheduleTime={scheduleTime} \r\n// //                     setScheduleTime={setScheduleTime} \r\n// //                 />\r\n// //             </div>\r\n// //             <TextContainer users={users} />\r\n// //         </div>\r\n// //     );\r\n// // };\r\n\r\n// // export default Chat;\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import queryString from 'query-string';\r\n// import io from 'socket.io-client';\r\n// import { useLocation } from 'react-router-dom';\r\n// import Infobar from '../Infobar/Infobar';\r\n// import Input from '../Input/Input';\r\n// import Messages from '../Messages/Messages';\r\n// import TextContainer from '../TextContainer/TextContainer';\r\n// import './Chat.css';\r\n\r\n// let socket;\r\n\r\n// const Chat = () => {\r\n//     const location = useLocation();\r\n//     const [name, setName] = useState('');\r\n//     const [room, setRoom] = useState('');\r\n//     const [users, setUsers] = useState([]);\r\n//     const [message, setMessage] = useState('');\r\n//     const [messages, setMessages] = useState([]);\r\n//     const [scheduleTime, setScheduleTime] = useState('');\r\n//     const ENDPOINT = 'http://localhost:5000';\r\n\r\n//     useEffect(() => {\r\n//         const { name, room } = queryString.parse(location.search);\r\n//         socket = io(ENDPOINT);\r\n//         setName(name);\r\n//         setRoom(room);\r\n\r\n//         socket.emit('join', { name, room }, (error) => {\r\n//             if (error) {\r\n//                 alert(error);\r\n//             }\r\n//         });\r\n\r\n//         socket.on('message', (message) => {\r\n//             setMessages((prevMessages) => [...prevMessages, message]);\r\n//         });\r\n\r\n//         socket.on(\"roomData\", ({ users }) => {\r\n//             setUsers(users);\r\n//         });\r\n\r\n//         socket.on('messageSeen', (messageId) => {\r\n//             setMessages((prevMessages) => {\r\n//                 return prevMessages.map((msg, index) => {\r\n//                     if (index === messageId) {\r\n//                         return { ...msg, seen: true }; // Mark the message as seen\r\n//                     }\r\n//                     return msg;\r\n//                 });\r\n//             });\r\n//         });\r\n\r\n//         return () => {\r\n//             socket.disconnect();\r\n//             socket.off();\r\n//         };\r\n//     }, [ENDPOINT, location.search]);\r\n\r\n//     const sendMessage = (event) => {\r\n//         event.preventDefault();\r\n//         if (message) {\r\n//             const msgId = messages.length; // Generate a message ID based on the current message length\r\n//             const msgObj = { id: msgId, user: name, text: message, seen: false }; // Include id and seen status\r\n\r\n//             socket.emit('sendMessage', msgObj, () => {\r\n//                 setMessage('');\r\n//                 setScheduleTime('');\r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     const handleMessageSeen = (messageIndex) => {\r\n//         socket.emit('seenMessage', messageIndex); // Emit seen event\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (messages.length > 0) {\r\n//             handleMessageSeen(messages.length - 1); // Mark the latest message as seen\r\n//         }\r\n//     }, [messages]);\r\n\r\n//     return (\r\n//         <div className='outerContainer'>\r\n//             <div className='container'>\r\n//                 <Infobar room={room} />\r\n//                 <Messages messages={messages} name={name} />\r\n//                 <Input \r\n//                     message={message} \r\n//                     setMessage={setMessage} \r\n//                     sendMessage={sendMessage} \r\n//                     scheduleTime={scheduleTime} \r\n//                     setScheduleTime={setScheduleTime} \r\n//                 />\r\n//             </div>\r\n//             <TextContainer users={users} />\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Chat;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}