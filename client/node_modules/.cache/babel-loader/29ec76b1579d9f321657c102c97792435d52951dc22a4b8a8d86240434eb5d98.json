{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vindi\\\\OneDrive\\\\Documents\\\\whatschat\\\\client\\\\src\\\\components\\\\Chat\\\\Chat.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect,useState } from 'react'\n// import queryString from 'query-string';\n// import io from 'socket.io-client';\n// import { useLocation } from 'react-router-dom';\n// import Infobar from '../Infobar/Infobar';\n// import Input from '../Input/Input';\n// import Messages from '../Messages/Messages';\n// // import { eventNames } from 'process';\n// import './Chat.css'\n\n// let socket;\n\n// const Chat=()=>{\n//     const location = useLocation();\n//     const [name,setName]=useState('');\n//     const [room,setRoom]=useState('');\n//     const [message,setMessage]=useState('');\n//     const [messages,setMessages]=useState([]);\n//     const ENDPOINT='localhost:5000'\n//     useEffect(() => {\n//         // if (location.search) { // Ensure location.search is defined\n//             const {name,room} = queryString.parse(location.search);\n\n//             socket=io(ENDPOINT);\n//             setName(name);\n//             setRoom(room); \n\n//             socket.on('connect',()=>{\n//                 console.log('Connected to the server');\n//                 // socket.emit('join',{name,room},({error})=>{\n//                 //     alert(error);\n//                 // });\n//                 socket.emit('join',{name,room},()=>{\n//                 });\n//             });\n//             return ()=>{\n//                 socket.disconnect();\n//                 socket.off();\n//             };\n\n//             // console.log(socket);  \n//                   // logs the parsed object\n//         // }\n//     }, [ENDPOINT,location.search]);\n\n//     useEffect(()=>{\n//         socket.on('message',message=>{\n//             setMessages(messages=>[...messages,message]);        \n//         })\n//     },[messages]);\n\n// const sendMessage=(event)=>{\n//     event.preventDefault();\n//     if(message){\n//         socket.emit('sendMessage',message,()=>{\n//             setMessage('')\n//         })\n//     }\n// }\n// console.log(message,messages);\n\n//     return (<div className='outerContainer'>\n//         <div className='container'>\n//             <Infobar room={room}/>\n//             <Input message={message} setMessage={setMessage} sendMessage={sendMessage}/>\n//             <Messages messages={messages}/>\n//         </div>\n//     </div>);\n\n// };\n// export default Chat; \n\nimport React, { useEffect, useState } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport { useLocation } from 'react-router-dom';\nimport Infobar from '../Infobar/Infobar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\nconst Chat = () => {\n  _s();\n  const location = useLocation();\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = 'http://localhost:5000'; // Make sure to include the protocol (http://)\n\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room);\n    socket.emit('join', {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    });\n\n    // Set up the message listener\n    socket.on('message', message => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n    return () => {\n      socket.disconnect();\n      socket.off(); // Clean up the socket connection\n    };\n  }, [ENDPOINT, location.search]); // Only set up the socket on these changes\n\n  const sendMessage = event => {\n    event.preventDefault();\n    if (message) {\n      socket.emit('sendMessage', message, () => {\n        setMessage('');\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Infobar, {\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"f77Kf5bMhgIBAF+JSGEUhJHf6Tc=\", false, function () {\n  return [useLocation];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","queryString","io","useLocation","Infobar","Input","Messages","jsxDEV","_jsxDEV","socket","Chat","_s","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","error","alert","on","prevMessages","disconnect","off","sendMessage","event","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/vindi/OneDrive/Documents/whatschat/client/src/components/Chat/Chat.js"],"sourcesContent":["// import React, { useEffect,useState } from 'react'\r\n// import queryString from 'query-string';\r\n// import io from 'socket.io-client';\r\n// import { useLocation } from 'react-router-dom';\r\n// import Infobar from '../Infobar/Infobar';\r\n// import Input from '../Input/Input';\r\n// import Messages from '../Messages/Messages';\r\n// // import { eventNames } from 'process';\r\n// import './Chat.css'\r\n\r\n// let socket;\r\n\r\n// const Chat=()=>{\r\n//     const location = useLocation();\r\n//     const [name,setName]=useState('');\r\n//     const [room,setRoom]=useState('');\r\n//     const [message,setMessage]=useState('');\r\n//     const [messages,setMessages]=useState([]);\r\n//     const ENDPOINT='localhost:5000'\r\n//     useEffect(() => {\r\n//         // if (location.search) { // Ensure location.search is defined\r\n//             const {name,room} = queryString.parse(location.search);\r\n\r\n//             socket=io(ENDPOINT);\r\n//             setName(name);\r\n//             setRoom(room); \r\n\r\n//             socket.on('connect',()=>{\r\n//                 console.log('Connected to the server');\r\n//                 // socket.emit('join',{name,room},({error})=>{\r\n//                 //     alert(error);\r\n//                 // });\r\n//                 socket.emit('join',{name,room},()=>{\r\n//                 });\r\n//             });\r\n//             return ()=>{\r\n//                 socket.disconnect();\r\n//                 socket.off();\r\n//             };\r\n\r\n            \r\n//             // console.log(socket);  \r\n//                   // logs the parsed object\r\n//         // }\r\n//     }, [ENDPOINT,location.search]);\r\n\r\n//     useEffect(()=>{\r\n//         socket.on('message',message=>{\r\n//             setMessages(messages=>[...messages,message]);        \r\n//         })\r\n//     },[messages]);\r\n\r\n\r\n// const sendMessage=(event)=>{\r\n//     event.preventDefault();\r\n//     if(message){\r\n//         socket.emit('sendMessage',message,()=>{\r\n//             setMessage('')\r\n//         })\r\n//     }\r\n// }\r\n// console.log(message,messages);\r\n\r\n//     return (<div className='outerContainer'>\r\n//         <div className='container'>\r\n//             <Infobar room={room}/>\r\n//             <Input message={message} setMessage={setMessage} sendMessage={sendMessage}/>\r\n//             <Messages messages={messages}/>\r\n//         </div>\r\n//     </div>);\r\n    \r\n    \r\n// };\r\n// export default Chat; \r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Infobar from '../Infobar/Infobar';\r\nimport Input from '../Input/Input';\r\nimport Messages from '../Messages/Messages';\r\nimport './Chat.css';\r\n\r\nlet socket;\r\n\r\nconst Chat = () => {\r\n    const location = useLocation();\r\n    const [name, setName] = useState('');\r\n    const [room, setRoom] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const ENDPOINT = 'http://localhost:5000'; // Make sure to include the protocol (http://)\r\n\r\n    useEffect(() => {\r\n        const { name, room } = queryString.parse(location.search);\r\n        socket = io(ENDPOINT);\r\n        setName(name);\r\n        setRoom(room);\r\n\r\n        socket.emit('join', { name, room }, (error) => {\r\n            if (error) {\r\n                alert(error);\r\n            }\r\n        });\r\n\r\n        // Set up the message listener\r\n        socket.on('message', (message) => {\r\n            setMessages((prevMessages) => [...prevMessages, message]);\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n            socket.off(); // Clean up the socket connection\r\n        };\r\n    }, [ENDPOINT, location.search]); // Only set up the socket on these changes\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n        if (message) {\r\n            socket.emit('sendMessage', message, () => {\r\n                setMessage('');\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='outerContainer'>\r\n            <div className='container'>\r\n                <Infobar room={room} />\r\n                <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n                <Messages messages={messages} name={name} /> {/* Ensure name is passed if needed */}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}