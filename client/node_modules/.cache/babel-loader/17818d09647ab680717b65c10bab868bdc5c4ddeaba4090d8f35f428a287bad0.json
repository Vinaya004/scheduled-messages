{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vindi\\\\OneDrive\\\\Documents\\\\whatschat\\\\client\\\\src\\\\components\\\\Chat\\\\Chat.js\",\n  _s = $RefreshSig$();\n// // // // // // // // // // import React, { useEffect,useState } from 'react'\n// // // // // // // // // // import queryString from 'query-string';\n// // // // // // // // // // import io from 'socket.io-client';\n// // // // // // // // // // import { useLocation } from 'react-router-dom';\n// // // // // // // // // // import Infobar from '../Infobar/Infobar';\n// // // // // // // // // // import Input from '../Input/Input';\n// // // // // // // // // // import Messages from '../Messages/Messages';\n// // // // // // // // // // // import { eventNames } from 'process';\n// // // // // // // // // // import './Chat.css'\n\n// // // // // // // // // // let socket;\n\n// // // // // // // // // // const Chat=()=>{\n// // // // // // // // // //     const location = useLocation();\n// // // // // // // // // //     const [name,setName]=useState('');\n// // // // // // // // // //     const [room,setRoom]=useState('');\n// // // // // // // // // //     const [message,setMessage]=useState('');\n// // // // // // // // // //     const [messages,setMessages]=useState([]);\n// // // // // // // // // //     const ENDPOINT='localhost:5000'\n// // // // // // // // // //     useEffect(() => {\n// // // // // // // // // //         // if (location.search) { // Ensure location.search is defined\n// // // // // // // // // //             const {name,room} = queryString.parse(location.search);\n\n// // // // // // // // // //             socket=io(ENDPOINT);\n// // // // // // // // // //             setName(name);\n// // // // // // // // // //             setRoom(room); \n\n// // // // // // // // // //             socket.on('connect',()=>{\n// // // // // // // // // //                 console.log('Connected to the server');\n// // // // // // // // // //                 // socket.emit('join',{name,room},({error})=>{\n// // // // // // // // // //                 //     alert(error);\n// // // // // // // // // //                 // });\n// // // // // // // // // //                 socket.emit('join',{name,room},()=>{\n// // // // // // // // // //                 });\n// // // // // // // // // //             });\n// // // // // // // // // //             return ()=>{\n// // // // // // // // // //                 socket.disconnect();\n// // // // // // // // // //                 socket.off();\n// // // // // // // // // //             };\n\n// // // // // // // // // //             // console.log(socket);  \n// // // // // // // // // //                   // logs the parsed object\n// // // // // // // // // //         // }\n// // // // // // // // // //     }, [ENDPOINT,location.search]);\n\n// // // // // // // // // //     useEffect(()=>{\n// // // // // // // // // //         socket.on('message',message=>{\n// // // // // // // // // //             setMessages(messages=>[...messages,message]);        \n// // // // // // // // // //         })\n// // // // // // // // // //     },[messages]);\n\n// // // // // // // // // // const sendMessage=(event)=>{\n// // // // // // // // // //     event.preventDefault();\n// // // // // // // // // //     if(message){\n// // // // // // // // // //         socket.emit('sendMessage',message,()=>{\n// // // // // // // // // //             setMessage('')\n// // // // // // // // // //         })\n// // // // // // // // // //     }\n// // // // // // // // // // }\n// // // // // // // // // // console.log(message,messages);\n\n// // // // // // // // // //     return (<div className='outerContainer'>\n// // // // // // // // // //         <div className='container'>\n// // // // // // // // // //             <Infobar room={room}/>\n// // // // // // // // // //             <Input message={message} setMessage={setMessage} sendMessage={sendMessage}/>\n// // // // // // // // // //             <Messages messages={messages}/>\n// // // // // // // // // //         </div>\n// // // // // // // // // //     </div>);\n\n// // // // // // // // // // };\n// // // // // // // // // // export default Chat; \n\n// // // // // // // // // import React, { useEffect, useState } from 'react';\n// // // // // // // // // import queryString from 'query-string';\n// // // // // // // // // import io from 'socket.io-client';\n// // // // // // // // // import { useLocation } from 'react-router-dom';\n// // // // // // // // // import Infobar from '../Infobar/Infobar';\n// // // // // // // // // import Input from '../Input/Input';\n// // // // // // // // // import Messages from '../Messages/Messages';\n// // // // // // // // // import './Chat.css';\n\n// // // // // // // // // let socket;\n\n// // // // // // // // // const Chat = () => {\n// // // // // // // // //     const location = useLocation();\n// // // // // // // // //     const [name, setName] = useState('');\n// // // // // // // // //     const [room, setRoom] = useState('');\n// // // // // // // // //     const [message, setMessage] = useState('');\n// // // // // // // // //     const [messages, setMessages] = useState([]);\n// // // // // // // // //     const ENDPOINT = 'http://localhost:5000'; // Make sure to include the protocol (http://)\n\n// // // // // // // // //     useEffect(() => {\n// // // // // // // // //         const { name, room } = queryString.parse(location.search);\n// // // // // // // // //         socket = io(ENDPOINT);\n// // // // // // // // //         setName(name);\n// // // // // // // // //         setRoom(room);\n\n// // // // // // // // //         socket.emit('join', { name, room }, (error) => {\n// // // // // // // // //             if (error) {\n// // // // // // // // //                 alert(error);\n// // // // // // // // //             }\n// // // // // // // // //         });\n\n// // // // // // // // //         // Set up the message listener\n// // // // // // // // //         socket.on('message', (message) => {\n// // // // // // // // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // // // // // // // //         });\n\n// // // // // // // // //         return () => {\n// // // // // // // // //             socket.disconnect();\n// // // // // // // // //             socket.off(); // Clean up the socket connection\n// // // // // // // // //         };\n// // // // // // // // //     }, [ENDPOINT, location.search]); // Only set up the socket on these changes\n\n// // // // // // // // //     const sendMessage = (event) => {\n// // // // // // // // //         event.preventDefault();\n// // // // // // // // //         if (message) {\n// // // // // // // // //             socket.emit('sendMessage', message, () => {\n// // // // // // // // //                 setMessage('');\n// // // // // // // // //             });\n// // // // // // // // //         }\n// // // // // // // // //     };\n\n// // // // // // // // //     return (\n// // // // // // // // //         <div className='outerContainer'>\n// // // // // // // // //             <div className='container'>\n// // // // // // // // //                 <Infobar room={room} />\n// // // // // // // // //                 <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n// // // // // // // // //                 <Messages messages={messages} name={name} /> {/* Ensure name is passed if needed */}\n// // // // // // // // //             </div>\n// // // // // // // // //         </div>\n// // // // // // // // //     );\n// // // // // // // // // };\n\n// // // // // // // // // export default Chat;\n\n// // // // // // import React, { useEffect, useState } from 'react';\n// // // // // // import queryString from 'query-string';\n// // // // // // import io from 'socket.io-client';\n// // // // // // import { useLocation } from 'react-router-dom';\n// // // // // // import Infobar from '../Infobar/Infobar';\n// // // // // // import Input from '../Input/Input';\n// // // // // // import Messages from '../Messages/Messages';\n// // // // // // import TextContainer from '../TextContainer/TextContainer';\n// // // // // // import './Chat.css';\n\n// // // // // // let socket;\n\n// // // // // // const Chat = () => {\n// // // // // //     const location = useLocation();\n// // // // // //     const [name, setName] = useState('');\n// // // // // //     const [room, setRoom] = useState('');\n// // // // // //     const [users, setUsers] = useState([]); // Initialize users as an array\n// // // // // //     const [message, setMessage] = useState('');\n// // // // // //     const [messages, setMessages] = useState([]);\n// // // // // //     const [scheduleTime, setScheduleTime] = useState('');\n// // // // // //     const ENDPOINT = 'http://localhost:5000';\n\n// // // // // //     useEffect(() => {\n// // // // // //         const { name, room } = queryString.parse(location.search);\n// // // // // //         socket = io(ENDPOINT);\n// // // // // //         setName(name);\n// // // // // //         setRoom(room);\n\n// // // // // //         socket.emit('join', { name, room }, (error) => {\n// // // // // //             if (error) {\n// // // // // //                 alert(error);\n// // // // // //             }\n// // // // // //         });\n\n// // // // // //         // Set up message listener and room data listener\n// // // // // //         socket.on('message', (message) => {\n// // // // // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // // // // //         });\n\n// // // // // //         socket.on(\"roomData\", ({ users }) => {\n// // // // // //             setUsers(users);\n// // // // // //         });\n\n// // // // // //         return () => {\n// // // // // //             socket.disconnect();\n// // // // // //             socket.off(); // Clean up the socket connection\n// // // // // //         };\n// // // // // //     }, [ENDPOINT, location.search]);\n\n// // // // // //     const sendMessage = (event) => {\n// // // // // //         event.preventDefault();\n// // // // // //         if (message) {\n// // // // // //             const currentTime = new Date();\n// // // // // //             const scheduledTime = new Date(scheduleTime);\n\n// // // // // //             // Check if the scheduled time is in the future\n// // // // // //             if (scheduledTime > currentTime) {\n// // // // // //                 const timeDiff = scheduledTime - currentTime;\n\n// // // // // //                 // Schedule sending the message\n// // // // // //                 setTimeout(() => {\n// // // // // //                     socket.emit('sendMessage', message, () => {\n// // // // // //                         setMessage('');\n// // // // // //                         setScheduleTime('');\n// // // // // //                     });\n// // // // // //                 }, timeDiff);\n// // // // // //             } else {\n// // // // // //                 // Send message immediately if no valid scheduled time\n// // // // // //                 socket.emit('sendMessage', message, () => {\n// // // // // //                     setMessage('');\n// // // // // //                     setScheduleTime('');\n// // // // // //                 });\n// // // // // //             }\n// // // // // //         }\n// // // // // //     };\n\n// // // // // //     return (\n// // // // // //         <div className='outerContainer'>\n// // // // // //             <div className='container'>\n// // // // // //                 <Infobar room={room} />\n// // // // // //                 <Messages messages={messages} name={name} />\n// // // // // //                 <Input \n// // // // // //                     message={message} \n// // // // // //                     setMessage={setMessage} \n// // // // // //                     sendMessage={sendMessage} \n// // // // // //                     scheduleTime={scheduleTime} \n// // // // // //                     setScheduleTime={setScheduleTime} \n// // // // // //                 />\n// // // // // //             </div>\n// // // // // //             <TextContainer users={users} />\n// // // // // //         </div>\n// // // // // //     );\n// // // // // // };\n\n// // // // // // export default Chat;\n\n// // // // // import React, { useEffect, useState } from 'react';\n// // // // // import queryString from 'query-string';\n// // // // // import io from 'socket.io-client';\n// // // // // import { useLocation } from 'react-router-dom';\n// // // // // import Infobar from '../Infobar/Infobar';\n// // // // // import Input from '../Input/Input';\n// // // // // import Messages from '../Messages/Messages';\n// // // // // import TextContainer from '../TextContainer/TextContainer';\n// // // // // import './Chat.css';\n\n// // // // // let socket;\n\n// // // // // const Chat = () => {\n// // // // //     const location = useLocation();\n// // // // //     const [name, setName] = useState('');\n// // // // //     const [room, setRoom] = useState('');\n// // // // //     const [users, setUsers] = useState([]); // Initialize users as an array\n// // // // //     const [message, setMessage] = useState('');\n// // // // //     const [messages, setMessages] = useState([]);\n// // // // //     const [scheduleTime, setScheduleTime] = useState('');\n// // // // //     const ENDPOINT = 'http://localhost:5000';\n\n// // // // //     useEffect(() => {\n// // // // //         const { name, room } = queryString.parse(location.search);\n// // // // //         socket = io(ENDPOINT);\n// // // // //         setName(name);\n// // // // //         setRoom(room);\n\n// // // // //         socket.emit('join', { name, room }, (error) => {\n// // // // //             if (error) {\n// // // // //                 alert(error);\n// // // // //             }\n// // // // //         });\n\n// // // // //         // Set up message listener and room data listener\n// // // // //         socket.on('message', (message) => {\n// // // // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // // // //         });\n\n// // // // //         socket.on(\"roomData\", ({ users }) => {\n// // // // //             setUsers(users);\n// // // // //         });\n\n// // // // //         return () => {\n// // // // //             socket.disconnect();\n// // // // //             socket.off(); // Clean up the socket connection\n// // // // //         };\n// // // // //     }, [ENDPOINT, location.search]);\n\n// // // // //     const sendMessage = (event) => {\n// // // // //         event.preventDefault();\n// // // // //         if (message) {\n// // // // //             const currentTime = new Date();\n// // // // //             const scheduledTime = new Date(scheduleTime);\n\n// // // // //             // Check if the scheduled time is in the future\n// // // // //             if (scheduledTime > currentTime) {\n// // // // //                 const timeDiff = scheduledTime - currentTime;\n\n// // // // //                 // Schedule sending the message\n// // // // //                 setTimeout(() => {\n// // // // //                     socket.emit('sendMessage', { text: message, user: name }, () => {\n// // // // //                         setMessage('');\n// // // // //                         setScheduleTime('');\n// // // // //                     });\n// // // // //                 }, timeDiff);\n// // // // //             } else {\n// // // // //                 // Send message immediately if no valid scheduled time\n// // // // //                 socket.emit('sendMessage', { text: message, user: name }, () => {\n// // // // //                     setMessage('');\n// // // // //                     setScheduleTime('');\n// // // // //                 });\n// // // // //             }\n// // // // //         }\n// // // // //     };\n\n// // // // //     return (\n// // // // //         <div className='outerContainer'>\n// // // // //             <div className='container'>\n// // // // //                 <Infobar room={room} />\n// // // // //                 <Messages messages={messages} name={name} />\n// // // // //                 <Input \n// // // // //                     message={message} \n// // // // //                     setMessage={setMessage} \n// // // // //                     sendMessage={sendMessage} \n// // // // //                     scheduleTime={scheduleTime} \n// // // // //                     setScheduleTime={setScheduleTime} \n// // // // //                 />\n// // // // //             </div>\n// // // // //             <TextContainer users={users} />\n// // // // //         </div>\n// // // // //     );\n// // // // // };\n\n// // // // // export default Chat;\n\n// // // // import React, { useEffect, useState } from 'react';\n// // // // import queryString from 'query-string';\n// // // // import io from 'socket.io-client';\n// // // // import { useLocation } from 'react-router-dom';\n// // // // import Infobar from '../Infobar/Infobar';\n// // // // import Input from '../Input/Input';\n// // // // import Messages from '../Messages/Messages';\n// // // // import TextContainer from '../TextContainer/TextContainer';\n// // // // import './Chat.css';\n\n// // // // let socket;\n\n// // // // const Chat = () => {\n// // // //     const location = useLocation();\n// // // //     const [name, setName] = useState('');\n// // // //     const [room, setRoom] = useState('');\n// // // //     const [users, setUsers] = useState([]);\n// // // //     const [message, setMessage] = useState('');\n// // // //     const [messages, setMessages] = useState([]);\n// // // //     const [scheduleTime, setScheduleTime] = useState(null); // Set initial value to null for clarity\n// // // //     const ENDPOINT = 'http://localhost:5000';\n\n// // // //     useEffect(() => {\n// // // //         const { name, room } = queryString.parse(location.search);\n// // // //         socket = io(ENDPOINT);\n// // // //         setName(name);\n// // // //         setRoom(room);\n\n// // // //         socket.emit('join', { name, room }, (error) => {\n// // // //             if (error) {\n// // // //                 alert(error);\n// // // //             }\n// // // //         });\n\n// // // //         // Set up message listener and room data listener\n// // // //         socket.on('message', (message) => {\n// // // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // // //         });\n\n// // // //         socket.on(\"roomData\", ({ users }) => {\n// // // //             setUsers(users);\n// // // //         });\n\n// // // //         return () => {\n// // // //             socket.disconnect();\n// // // //             socket.off(); // Clean up the socket connection\n// // // //         };\n// // // //     }, [ENDPOINT, location.search]);\n\n// // // //     const sendMessage = (event) => {\n// // // //         event.preventDefault();\n// // // //         if (message) {\n// // // //             const currentTime = new Date();\n// // // //             const scheduledTime = scheduleTime ? new Date(scheduleTime) : null;\n\n// // // //             if (scheduledTime && scheduledTime > currentTime) {\n// // // //                 const timeDiff = scheduledTime - currentTime;\n\n// // // //                 // Schedule sending the message\n// // // //                 setTimeout(() => {\n// // // //                     socket.emit('sendMessage', { text: message, user: name }, () => {\n// // // //                         setMessage('');\n// // // //                         setScheduleTime(null); // Clear the scheduled time after sending\n// // // //                     });\n// // // //                 }, timeDiff);\n// // // //             } else {\n// // // //                 // Send immediately if no valid scheduled time\n// // // //                 socket.emit('sendMessage', { text: message, user: name }, () => {\n// // // //                     setMessage('');\n// // // //                     setScheduleTime(null);\n// // // //                 });\n// // // //             }\n// // // //         }\n// // // //     };\n\n// // // //     return (\n// // // //         <div className='outerContainer'>\n// // // //             <div className='container'>\n// // // //                 <Infobar room={room} />\n// // // //                 <Messages messages={messages} name={name} />\n// // // //                 <Input \n// // // //                     message={message} \n// // // //                     setMessage={setMessage} \n// // // //                     sendMessage={sendMessage} \n// // // //                     scheduleTime={scheduleTime} \n// // // //                     setScheduleTime={setScheduleTime} \n// // // //                 />\n// // // //             </div>\n// // // //             <TextContainer users={users} />\n// // // //         </div>\n// // // //     );\n// // // // };\n\n// // // // export default Chat;\n\n// // // import React, { useEffect, useState } from 'react';\n// // // import queryString from 'query-string';\n// // // import io from 'socket.io-client';\n// // // import { useLocation } from 'react-router-dom';\n// // // import Infobar from '../Infobar/Infobar';\n// // // import Input from '../Input/Input';\n// // // import Messages from '../Messages/Messages';\n// // // import TextContainer from '../TextContainer/TextContainer';\n// // // import './Chat.css';\n\n// // // let socket;\n\n// // // const Chat = () => {\n// // //     const location = useLocation();\n// // //     const [name, setName] = useState('');\n// // //     const [room, setRoom] = useState('');\n// // //     const [users, setUsers] = useState([]);\n// // //     const [message, setMessage] = useState('');\n// // //     const [messages, setMessages] = useState([]);\n// // //     const [scheduledMessages, setScheduledMessages] = useState([]); // Store scheduled messages\n// // //     const ENDPOINT = 'http://localhost:5000';\n\n// // //     useEffect(() => {\n// // //         const { name, room } = queryString.parse(location.search);\n// // //         socket = io(ENDPOINT);\n// // //         setName(name);\n// // //         setRoom(room);\n\n// // //         socket.emit('join', { name, room }, (error) => {\n// // //             if (error) {\n// // //                 alert(error);\n// // //             }\n// // //         });\n\n// // //         socket.on('message', (message) => {\n// // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // //         });\n\n// // //         socket.on(\"roomData\", ({ users }) => {\n// // //             setUsers(users);\n// // //         });\n\n// // //         return () => {\n// // //             socket.disconnect();\n// // //             socket.off();\n// // //         };\n// // //     }, [ENDPOINT, location.search]);\n\n// // //     const sendMessage = (event, scheduleDate = null) => {\n// // //         event.preventDefault();\n\n// // //         if (scheduleDate) {\n// // //             // Schedule message\n// // //             const newScheduledMessage = { text: message, scheduleDate, user: name };\n// // //             setScheduledMessages((prev) => [...prev, newScheduledMessage]);\n// // //             setMessage(''); // Clear the input field\n// // //         } else if (message) {\n// // //             // Send immediate message\n// // //             socket.emit('sendMessage', message, () => setMessage(''));\n// // //         }\n// // //     };\n\n// // //     return (\n// // //         <div className='outerContainer'>\n// // //             <div className='container'>\n// // //                 <Infobar room={room} />\n\n// // //                 {scheduledMessages.length > 0 && (\n// // //                     <div className='scheduledMessagesContainer'>\n// // //                         {scheduledMessages.map((msg, index) => (\n// // //                             <div key={index} className='scheduledMessage'>\n// // //                                 <p>{`Scheduled for: ${msg.scheduleDate.toLocaleString()}`}</p>\n// // //                                 <p>{msg.text}</p>\n// // //                             </div>\n// // //                         ))}\n// // //                     </div>\n// // //                 )}\n\n// // //                 <Messages messages={messages} name={name} />\n// // //                 <Input \n// // //                     message={message} \n// // //                     setMessage={setMessage} \n// // //                     sendMessage={sendMessage} \n// // //                 />\n// // //             </div>\n// // //             <TextContainer users={users} />\n// // //         </div>\n// // //     );\n// // // };\n\n// // // export default Chat;\n\n// // import React, { useEffect, useState } from 'react';\n// // import queryString from 'query-string';\n// // import io from 'socket.io-client';\n// // import { useLocation } from 'react-router-dom';\n// // import Infobar from '../Infobar/Infobar';\n// // import Input from '../Input/Input';\n// // import Messages from '../Messages/Messages';\n// // import TextContainer from '../TextContainer/TextContainer';\n// // import './Chat.css';\n\n// // let socket;\n\n// // const Chat = () => {\n// //     const location = useLocation();\n// //     const [name, setName] = useState('');\n// //     const [room, setRoom] = useState('');\n// //     const [users, setUsers] = useState([]);\n// //     const [message, setMessage] = useState('');\n// //     const [messages, setMessages] = useState([]);\n// //     const [scheduleTime, setScheduleTime] = useState('');\n// //     const [scheduledMessages, setScheduledMessages] = useState([]);\n// //     const ENDPOINT = 'http://localhost:5000';\n\n// //     useEffect(() => {\n// //         const { name, room } = queryString.parse(location.search);\n// //         socket = io(ENDPOINT);\n// //         setName(name);\n// //         setRoom(room);\n\n// //         socket.emit('join', { name, room }, (error) => {\n// //             if (error) {\n// //                 alert(error);\n// //             }\n// //         });\n\n// //         socket.on('message', (message) => {\n// //             setMessages((prevMessages) => [...prevMessages, message]);\n// //         });\n\n// //         socket.on(\"roomData\", ({ users }) => {\n// //             setUsers(users);\n// //         });\n\n// //         return () => {\n// //             socket.disconnect();\n// //             socket.off();\n// //         };\n// //     }, [ENDPOINT, location.search]);\n\n// //     const sendMessage = (event) => {\n// //         event.preventDefault();\n// //         if (message) {\n// //             const currentTime = new Date();\n// //             const scheduledTime = new Date(scheduleTime);\n\n// //             if (scheduledTime > currentTime) {\n// //                 const timeDiff = scheduledTime - currentTime;\n\n// //                 // Add message to scheduled messages list\n// //                 setScheduledMessages((prevScheduled) => [\n// //                     ...prevScheduled,\n// //                     { message, time: scheduledTime.toLocaleString() }\n// //                 ]);\n\n// //                 setTimeout(() => {\n// //                     socket.emit('sendMessage', message, () => {\n// //                         setMessage('');\n// //                         setScheduleTime('');\n// //                     });\n// //                 }, timeDiff);\n// //             } else {\n// //                 socket.emit('sendMessage', message, () => {\n// //                     setMessage('');\n// //                     setScheduleTime('');\n// //                 });\n// //             }\n// //         }\n// //     };\n\n// //     return (\n// //         <div className='outerContainer'>\n// //             <div className='container'>\n// //                 <Infobar room={room} />\n\n// //                 {/* Scheduled Messages Dropdown */}\n// //                 <div className=\"scheduledMessagesDropdown\">\n// //                     <h3>Scheduled Messages</h3>\n// //                     {scheduledMessages.length > 0 ? (\n// //                         scheduledMessages.map((msg, index) => (\n// //                             <div key={index} className=\"scheduledMessage\">\n// //                                 <p>{msg.time}</p>\n// //                                 <p>{msg.message}</p>\n// //                             </div>\n// //                         ))\n// //                     ) : (\n// //                         <p>No scheduled messages</p>\n// //                     )}\n// //                 </div>\n\n// //                 <Messages messages={messages} name={name} />\n// //                 <Input \n// //                     message={message} \n// //                     setMessage={setMessage} \n// //                     sendMessage={sendMessage} \n// //                     scheduleTime={scheduleTime} \n// //                     setScheduleTime={setScheduleTime} \n// //                 />\n// //             </div>\n// //             <TextContainer users={users} />\n// //         </div>\n// //     );\n// // };\n\n// // export default Chat;\n\n// import React, { useEffect, useState } from 'react';\n// import queryString from 'query-string';\n// import io from 'socket.io-client';\n// import { useLocation } from 'react-router-dom';\n// import Infobar from '../Infobar/Infobar';\n// import Input from '../Input/Input';\n// import Messages from '../Messages/Messages';\n// import TextContainer from '../TextContainer/TextContainer';\n// import './Chat.css';\n\n// let socket;\n\n// const Chat = () => {\n//     const location = useLocation();\n//     const [name, setName] = useState('');\n//     const [room, setRoom] = useState('');\n//     const [users, setUsers] = useState([]);\n//     const [message, setMessage] = useState('');\n//     const [messages, setMessages] = useState([]);\n//     const [scheduledMessages, setScheduledMessages] = useState([]); // New state for scheduled messages\n//     const [scheduleTime, setScheduleTime] = useState('');\n//     const ENDPOINT = 'http://localhost:5000';\n\n//     useEffect(() => {\n//         const { name, room } = queryString.parse(location.search);\n//         socket = io(ENDPOINT);\n//         setName(name);\n//         setRoom(room);\n\n//         socket.emit('join', { name, room }, (error) => {\n//             if (error) {\n//                 alert(error);\n//             }\n//         });\n\n//         socket.on('message', (message) => {\n//             setMessages((prevMessages) => [...prevMessages, message]);\n//         });\n\n//         socket.on(\"roomData\", ({ users }) => {\n//             setUsers(users);\n//         });\n\n//         return () => {\n//             socket.disconnect();\n//             socket.off();\n//         };\n//     }, [ENDPOINT, location.search]);\n\n//     const sendMessage = (event) => {\n//         event.preventDefault();\n//         if (message) {\n//             const currentTime = new Date();\n//             const scheduledTime = new Date(scheduleTime);\n\n//             if (scheduledTime > currentTime) {\n//                 const timeDiff = scheduledTime - currentTime;\n\n//                 setTimeout(() => {\n//                     socket.emit('sendMessage', { text: message, user: name }, () => {\n//                         setMessage('');\n//                         setScheduleTime('');\n//                     });\n//                     setScheduledMessages((prev) => [...prev, { text: message, time: scheduledTime }]); // Store scheduled message\n//                 }, timeDiff);\n//             } else {\n//                 socket.emit('sendMessage', { text: message, user: name }, () => {\n//                     setMessage('');\n//                     setScheduleTime('');\n//                 });\n//             }\n//         }\n//     };\n\n//     return (\n//         <div className='outerContainer'>\n//             <div className='container'>\n//                 <Infobar room={room} />\n//                 <div className=\"scheduledMessages\">\n//                     {scheduledMessages.map((msg, index) => (\n//                         <div key={index} className=\"scheduledMessage\">\n//                             <p>{`${msg.time.toLocaleString()}: ${msg.text}`}</p>\n//                         </div>\n//                     ))}\n//                 </div>\n//                 <Messages messages={messages} name={name} />\n//                 <Input \n//                     message={message} \n//                     setMessage={setMessage} \n//                     sendMessage={sendMessage} \n//                     scheduleTime={scheduleTime} \n//                     setScheduleTime={setScheduleTime} \n//                 />\n//             </div>\n//             <TextContainer users={users} />\n//         </div>\n//     );\n// };\n\n// export default Chat;\n\n// Chat.js\nimport React, { useEffect, useState } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport { useLocation } from 'react-router-dom';\nimport Infobar from '../Infobar/Infobar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport TextContainer from '../TextContainer/TextContainer';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\nconst Chat = () => {\n  _s();\n  const location = useLocation();\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState([]);\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [scheduledMessages, setScheduledMessages] = useState([]);\n  const ENDPOINT = 'http://localhost:5000';\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room);\n    socket.emit('join', {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    });\n    socket.on('message', message => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n    socket.on(\"roomData\", ({\n      users\n    }) => {\n      setUsers(users);\n    });\n    return () => {\n      socket.disconnect();\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  const sendMessage = (event, scheduledTime = null) => {\n    event.preventDefault();\n    if (message) {\n      if (scheduledTime) {\n        const newScheduledMessage = {\n          message,\n          scheduledTime,\n          id: Date.now()\n        };\n        setScheduledMessages([...scheduledMessages, newScheduledMessage]);\n        setMessage('');\n      } else {\n        socket.emit('sendMessage', message, () => setMessage(''));\n      }\n    }\n  };\n  const sendScheduledMessage = scheduledMessage => {\n    socket.emit('sendMessage', scheduledMessage.message, () => {\n      setScheduledMessages(prev => prev.filter(msg => msg.id !== scheduledMessage.id));\n    });\n  };\n  useEffect(() => {\n    scheduledMessages.forEach(msg => {\n      const currentTime = new Date();\n      const scheduledTime = new Date(msg.scheduledTime);\n      if (scheduledTime > currentTime) {\n        const timeDiff = scheduledTime - currentTime;\n        setTimeout(() => sendScheduledMessage(msg), timeDiff);\n      }\n    });\n  }, [scheduledMessages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Infobar, {\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 847,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"dropbtn\",\n          children: \"Scheduled Messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 851,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-content\",\n          children: scheduledMessages.length > 0 ? scheduledMessages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: `[${new Date(msg.scheduledTime).toLocaleString()}] ${msg.message}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 856,\n              columnNumber: 37\n            }, this)\n          }, msg.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 855,\n            columnNumber: 33\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No scheduled messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 860,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 852,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 850,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 865,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 846,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 872,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 845,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"V29IoxUVdQWlms5eCgzwCWJns0Y=\", false, function () {\n  return [useLocation];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","queryString","io","useLocation","Infobar","Input","Messages","TextContainer","jsxDEV","_jsxDEV","socket","Chat","_s","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","scheduledMessages","setScheduledMessages","ENDPOINT","parse","search","emit","error","alert","on","prevMessages","disconnect","off","sendMessage","event","scheduledTime","preventDefault","newScheduledMessage","id","Date","now","sendScheduledMessage","scheduledMessage","prev","filter","msg","forEach","currentTime","timeDiff","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/vindi/OneDrive/Documents/whatschat/client/src/components/Chat/Chat.js"],"sourcesContent":["// // // // // // // // // // import React, { useEffect,useState } from 'react'\r\n// // // // // // // // // // import queryString from 'query-string';\r\n// // // // // // // // // // import io from 'socket.io-client';\r\n// // // // // // // // // // import { useLocation } from 'react-router-dom';\r\n// // // // // // // // // // import Infobar from '../Infobar/Infobar';\r\n// // // // // // // // // // import Input from '../Input/Input';\r\n// // // // // // // // // // import Messages from '../Messages/Messages';\r\n// // // // // // // // // // // import { eventNames } from 'process';\r\n// // // // // // // // // // import './Chat.css'\r\n\r\n// // // // // // // // // // let socket;\r\n\r\n// // // // // // // // // // const Chat=()=>{\r\n// // // // // // // // // //     const location = useLocation();\r\n// // // // // // // // // //     const [name,setName]=useState('');\r\n// // // // // // // // // //     const [room,setRoom]=useState('');\r\n// // // // // // // // // //     const [message,setMessage]=useState('');\r\n// // // // // // // // // //     const [messages,setMessages]=useState([]);\r\n// // // // // // // // // //     const ENDPOINT='localhost:5000'\r\n// // // // // // // // // //     useEffect(() => {\r\n// // // // // // // // // //         // if (location.search) { // Ensure location.search is defined\r\n// // // // // // // // // //             const {name,room} = queryString.parse(location.search);\r\n\r\n// // // // // // // // // //             socket=io(ENDPOINT);\r\n// // // // // // // // // //             setName(name);\r\n// // // // // // // // // //             setRoom(room); \r\n\r\n// // // // // // // // // //             socket.on('connect',()=>{\r\n// // // // // // // // // //                 console.log('Connected to the server');\r\n// // // // // // // // // //                 // socket.emit('join',{name,room},({error})=>{\r\n// // // // // // // // // //                 //     alert(error);\r\n// // // // // // // // // //                 // });\r\n// // // // // // // // // //                 socket.emit('join',{name,room},()=>{\r\n// // // // // // // // // //                 });\r\n// // // // // // // // // //             });\r\n// // // // // // // // // //             return ()=>{\r\n// // // // // // // // // //                 socket.disconnect();\r\n// // // // // // // // // //                 socket.off();\r\n// // // // // // // // // //             };\r\n\r\n            \r\n// // // // // // // // // //             // console.log(socket);  \r\n// // // // // // // // // //                   // logs the parsed object\r\n// // // // // // // // // //         // }\r\n// // // // // // // // // //     }, [ENDPOINT,location.search]);\r\n\r\n// // // // // // // // // //     useEffect(()=>{\r\n// // // // // // // // // //         socket.on('message',message=>{\r\n// // // // // // // // // //             setMessages(messages=>[...messages,message]);        \r\n// // // // // // // // // //         })\r\n// // // // // // // // // //     },[messages]);\r\n\r\n\r\n// // // // // // // // // // const sendMessage=(event)=>{\r\n// // // // // // // // // //     event.preventDefault();\r\n// // // // // // // // // //     if(message){\r\n// // // // // // // // // //         socket.emit('sendMessage',message,()=>{\r\n// // // // // // // // // //             setMessage('')\r\n// // // // // // // // // //         })\r\n// // // // // // // // // //     }\r\n// // // // // // // // // // }\r\n// // // // // // // // // // console.log(message,messages);\r\n\r\n// // // // // // // // // //     return (<div className='outerContainer'>\r\n// // // // // // // // // //         <div className='container'>\r\n// // // // // // // // // //             <Infobar room={room}/>\r\n// // // // // // // // // //             <Input message={message} setMessage={setMessage} sendMessage={sendMessage}/>\r\n// // // // // // // // // //             <Messages messages={messages}/>\r\n// // // // // // // // // //         </div>\r\n// // // // // // // // // //     </div>);\r\n    \r\n    \r\n// // // // // // // // // // };\r\n// // // // // // // // // // export default Chat; \r\n\r\n\r\n// // // // // // // // // import React, { useEffect, useState } from 'react';\r\n// // // // // // // // // import queryString from 'query-string';\r\n// // // // // // // // // import io from 'socket.io-client';\r\n// // // // // // // // // import { useLocation } from 'react-router-dom';\r\n// // // // // // // // // import Infobar from '../Infobar/Infobar';\r\n// // // // // // // // // import Input from '../Input/Input';\r\n// // // // // // // // // import Messages from '../Messages/Messages';\r\n// // // // // // // // // import './Chat.css';\r\n\r\n// // // // // // // // // let socket;\r\n\r\n// // // // // // // // // const Chat = () => {\r\n// // // // // // // // //     const location = useLocation();\r\n// // // // // // // // //     const [name, setName] = useState('');\r\n// // // // // // // // //     const [room, setRoom] = useState('');\r\n// // // // // // // // //     const [message, setMessage] = useState('');\r\n// // // // // // // // //     const [messages, setMessages] = useState([]);\r\n// // // // // // // // //     const ENDPOINT = 'http://localhost:5000'; // Make sure to include the protocol (http://)\r\n\r\n// // // // // // // // //     useEffect(() => {\r\n// // // // // // // // //         const { name, room } = queryString.parse(location.search);\r\n// // // // // // // // //         socket = io(ENDPOINT);\r\n// // // // // // // // //         setName(name);\r\n// // // // // // // // //         setRoom(room);\r\n\r\n// // // // // // // // //         socket.emit('join', { name, room }, (error) => {\r\n// // // // // // // // //             if (error) {\r\n// // // // // // // // //                 alert(error);\r\n// // // // // // // // //             }\r\n// // // // // // // // //         });\r\n\r\n// // // // // // // // //         // Set up the message listener\r\n// // // // // // // // //         socket.on('message', (message) => {\r\n// // // // // // // // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // // // // // // // //         });\r\n\r\n// // // // // // // // //         return () => {\r\n// // // // // // // // //             socket.disconnect();\r\n// // // // // // // // //             socket.off(); // Clean up the socket connection\r\n// // // // // // // // //         };\r\n// // // // // // // // //     }, [ENDPOINT, location.search]); // Only set up the socket on these changes\r\n\r\n// // // // // // // // //     const sendMessage = (event) => {\r\n// // // // // // // // //         event.preventDefault();\r\n// // // // // // // // //         if (message) {\r\n// // // // // // // // //             socket.emit('sendMessage', message, () => {\r\n// // // // // // // // //                 setMessage('');\r\n// // // // // // // // //             });\r\n// // // // // // // // //         }\r\n// // // // // // // // //     };\r\n\r\n// // // // // // // // //     return (\r\n// // // // // // // // //         <div className='outerContainer'>\r\n// // // // // // // // //             <div className='container'>\r\n// // // // // // // // //                 <Infobar room={room} />\r\n// // // // // // // // //                 <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n// // // // // // // // //                 <Messages messages={messages} name={name} /> {/* Ensure name is passed if needed */}\r\n// // // // // // // // //             </div>\r\n// // // // // // // // //         </div>\r\n// // // // // // // // //     );\r\n// // // // // // // // // };\r\n\r\n// // // // // // // // // export default Chat;\r\n\r\n\r\n\r\n\r\n\r\n// // // // // // import React, { useEffect, useState } from 'react';\r\n// // // // // // import queryString from 'query-string';\r\n// // // // // // import io from 'socket.io-client';\r\n// // // // // // import { useLocation } from 'react-router-dom';\r\n// // // // // // import Infobar from '../Infobar/Infobar';\r\n// // // // // // import Input from '../Input/Input';\r\n// // // // // // import Messages from '../Messages/Messages';\r\n// // // // // // import TextContainer from '../TextContainer/TextContainer';\r\n// // // // // // import './Chat.css';\r\n\r\n// // // // // // let socket;\r\n\r\n// // // // // // const Chat = () => {\r\n// // // // // //     const location = useLocation();\r\n// // // // // //     const [name, setName] = useState('');\r\n// // // // // //     const [room, setRoom] = useState('');\r\n// // // // // //     const [users, setUsers] = useState([]); // Initialize users as an array\r\n// // // // // //     const [message, setMessage] = useState('');\r\n// // // // // //     const [messages, setMessages] = useState([]);\r\n// // // // // //     const [scheduleTime, setScheduleTime] = useState('');\r\n// // // // // //     const ENDPOINT = 'http://localhost:5000';\r\n\r\n// // // // // //     useEffect(() => {\r\n// // // // // //         const { name, room } = queryString.parse(location.search);\r\n// // // // // //         socket = io(ENDPOINT);\r\n// // // // // //         setName(name);\r\n// // // // // //         setRoom(room);\r\n\r\n// // // // // //         socket.emit('join', { name, room }, (error) => {\r\n// // // // // //             if (error) {\r\n// // // // // //                 alert(error);\r\n// // // // // //             }\r\n// // // // // //         });\r\n\r\n// // // // // //         // Set up message listener and room data listener\r\n// // // // // //         socket.on('message', (message) => {\r\n// // // // // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // // // // //         });\r\n\r\n// // // // // //         socket.on(\"roomData\", ({ users }) => {\r\n// // // // // //             setUsers(users);\r\n// // // // // //         });\r\n\r\n// // // // // //         return () => {\r\n// // // // // //             socket.disconnect();\r\n// // // // // //             socket.off(); // Clean up the socket connection\r\n// // // // // //         };\r\n// // // // // //     }, [ENDPOINT, location.search]);\r\n\r\n// // // // // //     const sendMessage = (event) => {\r\n// // // // // //         event.preventDefault();\r\n// // // // // //         if (message) {\r\n// // // // // //             const currentTime = new Date();\r\n// // // // // //             const scheduledTime = new Date(scheduleTime);\r\n\r\n// // // // // //             // Check if the scheduled time is in the future\r\n// // // // // //             if (scheduledTime > currentTime) {\r\n// // // // // //                 const timeDiff = scheduledTime - currentTime;\r\n\r\n// // // // // //                 // Schedule sending the message\r\n// // // // // //                 setTimeout(() => {\r\n// // // // // //                     socket.emit('sendMessage', message, () => {\r\n// // // // // //                         setMessage('');\r\n// // // // // //                         setScheduleTime('');\r\n// // // // // //                     });\r\n// // // // // //                 }, timeDiff);\r\n// // // // // //             } else {\r\n// // // // // //                 // Send message immediately if no valid scheduled time\r\n// // // // // //                 socket.emit('sendMessage', message, () => {\r\n// // // // // //                     setMessage('');\r\n// // // // // //                     setScheduleTime('');\r\n// // // // // //                 });\r\n// // // // // //             }\r\n// // // // // //         }\r\n// // // // // //     };\r\n\r\n// // // // // //     return (\r\n// // // // // //         <div className='outerContainer'>\r\n// // // // // //             <div className='container'>\r\n// // // // // //                 <Infobar room={room} />\r\n// // // // // //                 <Messages messages={messages} name={name} />\r\n// // // // // //                 <Input \r\n// // // // // //                     message={message} \r\n// // // // // //                     setMessage={setMessage} \r\n// // // // // //                     sendMessage={sendMessage} \r\n// // // // // //                     scheduleTime={scheduleTime} \r\n// // // // // //                     setScheduleTime={setScheduleTime} \r\n// // // // // //                 />\r\n// // // // // //             </div>\r\n// // // // // //             <TextContainer users={users} />\r\n// // // // // //         </div>\r\n// // // // // //     );\r\n// // // // // // };\r\n\r\n// // // // // // export default Chat;\r\n\r\n\r\n\r\n\r\n// // // // // import React, { useEffect, useState } from 'react';\r\n// // // // // import queryString from 'query-string';\r\n// // // // // import io from 'socket.io-client';\r\n// // // // // import { useLocation } from 'react-router-dom';\r\n// // // // // import Infobar from '../Infobar/Infobar';\r\n// // // // // import Input from '../Input/Input';\r\n// // // // // import Messages from '../Messages/Messages';\r\n// // // // // import TextContainer from '../TextContainer/TextContainer';\r\n// // // // // import './Chat.css';\r\n\r\n// // // // // let socket;\r\n\r\n// // // // // const Chat = () => {\r\n// // // // //     const location = useLocation();\r\n// // // // //     const [name, setName] = useState('');\r\n// // // // //     const [room, setRoom] = useState('');\r\n// // // // //     const [users, setUsers] = useState([]); // Initialize users as an array\r\n// // // // //     const [message, setMessage] = useState('');\r\n// // // // //     const [messages, setMessages] = useState([]);\r\n// // // // //     const [scheduleTime, setScheduleTime] = useState('');\r\n// // // // //     const ENDPOINT = 'http://localhost:5000';\r\n\r\n// // // // //     useEffect(() => {\r\n// // // // //         const { name, room } = queryString.parse(location.search);\r\n// // // // //         socket = io(ENDPOINT);\r\n// // // // //         setName(name);\r\n// // // // //         setRoom(room);\r\n\r\n// // // // //         socket.emit('join', { name, room }, (error) => {\r\n// // // // //             if (error) {\r\n// // // // //                 alert(error);\r\n// // // // //             }\r\n// // // // //         });\r\n\r\n// // // // //         // Set up message listener and room data listener\r\n// // // // //         socket.on('message', (message) => {\r\n// // // // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // // // //         });\r\n\r\n// // // // //         socket.on(\"roomData\", ({ users }) => {\r\n// // // // //             setUsers(users);\r\n// // // // //         });\r\n\r\n// // // // //         return () => {\r\n// // // // //             socket.disconnect();\r\n// // // // //             socket.off(); // Clean up the socket connection\r\n// // // // //         };\r\n// // // // //     }, [ENDPOINT, location.search]);\r\n\r\n// // // // //     const sendMessage = (event) => {\r\n// // // // //         event.preventDefault();\r\n// // // // //         if (message) {\r\n// // // // //             const currentTime = new Date();\r\n// // // // //             const scheduledTime = new Date(scheduleTime);\r\n\r\n// // // // //             // Check if the scheduled time is in the future\r\n// // // // //             if (scheduledTime > currentTime) {\r\n// // // // //                 const timeDiff = scheduledTime - currentTime;\r\n\r\n// // // // //                 // Schedule sending the message\r\n// // // // //                 setTimeout(() => {\r\n// // // // //                     socket.emit('sendMessage', { text: message, user: name }, () => {\r\n// // // // //                         setMessage('');\r\n// // // // //                         setScheduleTime('');\r\n// // // // //                     });\r\n// // // // //                 }, timeDiff);\r\n// // // // //             } else {\r\n// // // // //                 // Send message immediately if no valid scheduled time\r\n// // // // //                 socket.emit('sendMessage', { text: message, user: name }, () => {\r\n// // // // //                     setMessage('');\r\n// // // // //                     setScheduleTime('');\r\n// // // // //                 });\r\n// // // // //             }\r\n// // // // //         }\r\n// // // // //     };\r\n\r\n// // // // //     return (\r\n// // // // //         <div className='outerContainer'>\r\n// // // // //             <div className='container'>\r\n// // // // //                 <Infobar room={room} />\r\n// // // // //                 <Messages messages={messages} name={name} />\r\n// // // // //                 <Input \r\n// // // // //                     message={message} \r\n// // // // //                     setMessage={setMessage} \r\n// // // // //                     sendMessage={sendMessage} \r\n// // // // //                     scheduleTime={scheduleTime} \r\n// // // // //                     setScheduleTime={setScheduleTime} \r\n// // // // //                 />\r\n// // // // //             </div>\r\n// // // // //             <TextContainer users={users} />\r\n// // // // //         </div>\r\n// // // // //     );\r\n// // // // // };\r\n\r\n// // // // // export default Chat;\r\n\r\n\r\n\r\n\r\n\r\n// // // // import React, { useEffect, useState } from 'react';\r\n// // // // import queryString from 'query-string';\r\n// // // // import io from 'socket.io-client';\r\n// // // // import { useLocation } from 'react-router-dom';\r\n// // // // import Infobar from '../Infobar/Infobar';\r\n// // // // import Input from '../Input/Input';\r\n// // // // import Messages from '../Messages/Messages';\r\n// // // // import TextContainer from '../TextContainer/TextContainer';\r\n// // // // import './Chat.css';\r\n\r\n// // // // let socket;\r\n\r\n// // // // const Chat = () => {\r\n// // // //     const location = useLocation();\r\n// // // //     const [name, setName] = useState('');\r\n// // // //     const [room, setRoom] = useState('');\r\n// // // //     const [users, setUsers] = useState([]);\r\n// // // //     const [message, setMessage] = useState('');\r\n// // // //     const [messages, setMessages] = useState([]);\r\n// // // //     const [scheduleTime, setScheduleTime] = useState(null); // Set initial value to null for clarity\r\n// // // //     const ENDPOINT = 'http://localhost:5000';\r\n\r\n// // // //     useEffect(() => {\r\n// // // //         const { name, room } = queryString.parse(location.search);\r\n// // // //         socket = io(ENDPOINT);\r\n// // // //         setName(name);\r\n// // // //         setRoom(room);\r\n\r\n// // // //         socket.emit('join', { name, room }, (error) => {\r\n// // // //             if (error) {\r\n// // // //                 alert(error);\r\n// // // //             }\r\n// // // //         });\r\n\r\n// // // //         // Set up message listener and room data listener\r\n// // // //         socket.on('message', (message) => {\r\n// // // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // // //         });\r\n\r\n// // // //         socket.on(\"roomData\", ({ users }) => {\r\n// // // //             setUsers(users);\r\n// // // //         });\r\n\r\n// // // //         return () => {\r\n// // // //             socket.disconnect();\r\n// // // //             socket.off(); // Clean up the socket connection\r\n// // // //         };\r\n// // // //     }, [ENDPOINT, location.search]);\r\n\r\n// // // //     const sendMessage = (event) => {\r\n// // // //         event.preventDefault();\r\n// // // //         if (message) {\r\n// // // //             const currentTime = new Date();\r\n// // // //             const scheduledTime = scheduleTime ? new Date(scheduleTime) : null;\r\n\r\n// // // //             if (scheduledTime && scheduledTime > currentTime) {\r\n// // // //                 const timeDiff = scheduledTime - currentTime;\r\n\r\n// // // //                 // Schedule sending the message\r\n// // // //                 setTimeout(() => {\r\n// // // //                     socket.emit('sendMessage', { text: message, user: name }, () => {\r\n// // // //                         setMessage('');\r\n// // // //                         setScheduleTime(null); // Clear the scheduled time after sending\r\n// // // //                     });\r\n// // // //                 }, timeDiff);\r\n// // // //             } else {\r\n// // // //                 // Send immediately if no valid scheduled time\r\n// // // //                 socket.emit('sendMessage', { text: message, user: name }, () => {\r\n// // // //                     setMessage('');\r\n// // // //                     setScheduleTime(null);\r\n// // // //                 });\r\n// // // //             }\r\n// // // //         }\r\n// // // //     };\r\n\r\n// // // //     return (\r\n// // // //         <div className='outerContainer'>\r\n// // // //             <div className='container'>\r\n// // // //                 <Infobar room={room} />\r\n// // // //                 <Messages messages={messages} name={name} />\r\n// // // //                 <Input \r\n// // // //                     message={message} \r\n// // // //                     setMessage={setMessage} \r\n// // // //                     sendMessage={sendMessage} \r\n// // // //                     scheduleTime={scheduleTime} \r\n// // // //                     setScheduleTime={setScheduleTime} \r\n// // // //                 />\r\n// // // //             </div>\r\n// // // //             <TextContainer users={users} />\r\n// // // //         </div>\r\n// // // //     );\r\n// // // // };\r\n\r\n// // // // export default Chat;\r\n\r\n\r\n\r\n\r\n\r\n// // // import React, { useEffect, useState } from 'react';\r\n// // // import queryString from 'query-string';\r\n// // // import io from 'socket.io-client';\r\n// // // import { useLocation } from 'react-router-dom';\r\n// // // import Infobar from '../Infobar/Infobar';\r\n// // // import Input from '../Input/Input';\r\n// // // import Messages from '../Messages/Messages';\r\n// // // import TextContainer from '../TextContainer/TextContainer';\r\n// // // import './Chat.css';\r\n\r\n// // // let socket;\r\n\r\n// // // const Chat = () => {\r\n// // //     const location = useLocation();\r\n// // //     const [name, setName] = useState('');\r\n// // //     const [room, setRoom] = useState('');\r\n// // //     const [users, setUsers] = useState([]);\r\n// // //     const [message, setMessage] = useState('');\r\n// // //     const [messages, setMessages] = useState([]);\r\n// // //     const [scheduledMessages, setScheduledMessages] = useState([]); // Store scheduled messages\r\n// // //     const ENDPOINT = 'http://localhost:5000';\r\n\r\n// // //     useEffect(() => {\r\n// // //         const { name, room } = queryString.parse(location.search);\r\n// // //         socket = io(ENDPOINT);\r\n// // //         setName(name);\r\n// // //         setRoom(room);\r\n\r\n// // //         socket.emit('join', { name, room }, (error) => {\r\n// // //             if (error) {\r\n// // //                 alert(error);\r\n// // //             }\r\n// // //         });\r\n\r\n// // //         socket.on('message', (message) => {\r\n// // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // //         });\r\n\r\n// // //         socket.on(\"roomData\", ({ users }) => {\r\n// // //             setUsers(users);\r\n// // //         });\r\n\r\n// // //         return () => {\r\n// // //             socket.disconnect();\r\n// // //             socket.off();\r\n// // //         };\r\n// // //     }, [ENDPOINT, location.search]);\r\n\r\n// // //     const sendMessage = (event, scheduleDate = null) => {\r\n// // //         event.preventDefault();\r\n        \r\n// // //         if (scheduleDate) {\r\n// // //             // Schedule message\r\n// // //             const newScheduledMessage = { text: message, scheduleDate, user: name };\r\n// // //             setScheduledMessages((prev) => [...prev, newScheduledMessage]);\r\n// // //             setMessage(''); // Clear the input field\r\n// // //         } else if (message) {\r\n// // //             // Send immediate message\r\n// // //             socket.emit('sendMessage', message, () => setMessage(''));\r\n// // //         }\r\n// // //     };\r\n\r\n// // //     return (\r\n// // //         <div className='outerContainer'>\r\n// // //             <div className='container'>\r\n// // //                 <Infobar room={room} />\r\n                \r\n// // //                 {scheduledMessages.length > 0 && (\r\n// // //                     <div className='scheduledMessagesContainer'>\r\n// // //                         {scheduledMessages.map((msg, index) => (\r\n// // //                             <div key={index} className='scheduledMessage'>\r\n// // //                                 <p>{`Scheduled for: ${msg.scheduleDate.toLocaleString()}`}</p>\r\n// // //                                 <p>{msg.text}</p>\r\n// // //                             </div>\r\n// // //                         ))}\r\n// // //                     </div>\r\n// // //                 )}\r\n\r\n// // //                 <Messages messages={messages} name={name} />\r\n// // //                 <Input \r\n// // //                     message={message} \r\n// // //                     setMessage={setMessage} \r\n// // //                     sendMessage={sendMessage} \r\n// // //                 />\r\n// // //             </div>\r\n// // //             <TextContainer users={users} />\r\n// // //         </div>\r\n// // //     );\r\n// // // };\r\n\r\n// // // export default Chat;\r\n\r\n\r\n\r\n// // import React, { useEffect, useState } from 'react';\r\n// // import queryString from 'query-string';\r\n// // import io from 'socket.io-client';\r\n// // import { useLocation } from 'react-router-dom';\r\n// // import Infobar from '../Infobar/Infobar';\r\n// // import Input from '../Input/Input';\r\n// // import Messages from '../Messages/Messages';\r\n// // import TextContainer from '../TextContainer/TextContainer';\r\n// // import './Chat.css';\r\n\r\n// // let socket;\r\n\r\n// // const Chat = () => {\r\n// //     const location = useLocation();\r\n// //     const [name, setName] = useState('');\r\n// //     const [room, setRoom] = useState('');\r\n// //     const [users, setUsers] = useState([]);\r\n// //     const [message, setMessage] = useState('');\r\n// //     const [messages, setMessages] = useState([]);\r\n// //     const [scheduleTime, setScheduleTime] = useState('');\r\n// //     const [scheduledMessages, setScheduledMessages] = useState([]);\r\n// //     const ENDPOINT = 'http://localhost:5000';\r\n\r\n// //     useEffect(() => {\r\n// //         const { name, room } = queryString.parse(location.search);\r\n// //         socket = io(ENDPOINT);\r\n// //         setName(name);\r\n// //         setRoom(room);\r\n\r\n// //         socket.emit('join', { name, room }, (error) => {\r\n// //             if (error) {\r\n// //                 alert(error);\r\n// //             }\r\n// //         });\r\n\r\n// //         socket.on('message', (message) => {\r\n// //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// //         });\r\n\r\n// //         socket.on(\"roomData\", ({ users }) => {\r\n// //             setUsers(users);\r\n// //         });\r\n\r\n// //         return () => {\r\n// //             socket.disconnect();\r\n// //             socket.off();\r\n// //         };\r\n// //     }, [ENDPOINT, location.search]);\r\n\r\n// //     const sendMessage = (event) => {\r\n// //         event.preventDefault();\r\n// //         if (message) {\r\n// //             const currentTime = new Date();\r\n// //             const scheduledTime = new Date(scheduleTime);\r\n\r\n// //             if (scheduledTime > currentTime) {\r\n// //                 const timeDiff = scheduledTime - currentTime;\r\n                \r\n// //                 // Add message to scheduled messages list\r\n// //                 setScheduledMessages((prevScheduled) => [\r\n// //                     ...prevScheduled,\r\n// //                     { message, time: scheduledTime.toLocaleString() }\r\n// //                 ]);\r\n\r\n// //                 setTimeout(() => {\r\n// //                     socket.emit('sendMessage', message, () => {\r\n// //                         setMessage('');\r\n// //                         setScheduleTime('');\r\n// //                     });\r\n// //                 }, timeDiff);\r\n// //             } else {\r\n// //                 socket.emit('sendMessage', message, () => {\r\n// //                     setMessage('');\r\n// //                     setScheduleTime('');\r\n// //                 });\r\n// //             }\r\n// //         }\r\n// //     };\r\n\r\n// //     return (\r\n// //         <div className='outerContainer'>\r\n// //             <div className='container'>\r\n// //                 <Infobar room={room} />\r\n\r\n// //                 {/* Scheduled Messages Dropdown */}\r\n// //                 <div className=\"scheduledMessagesDropdown\">\r\n// //                     <h3>Scheduled Messages</h3>\r\n// //                     {scheduledMessages.length > 0 ? (\r\n// //                         scheduledMessages.map((msg, index) => (\r\n// //                             <div key={index} className=\"scheduledMessage\">\r\n// //                                 <p>{msg.time}</p>\r\n// //                                 <p>{msg.message}</p>\r\n// //                             </div>\r\n// //                         ))\r\n// //                     ) : (\r\n// //                         <p>No scheduled messages</p>\r\n// //                     )}\r\n// //                 </div>\r\n\r\n// //                 <Messages messages={messages} name={name} />\r\n// //                 <Input \r\n// //                     message={message} \r\n// //                     setMessage={setMessage} \r\n// //                     sendMessage={sendMessage} \r\n// //                     scheduleTime={scheduleTime} \r\n// //                     setScheduleTime={setScheduleTime} \r\n// //                 />\r\n// //             </div>\r\n// //             <TextContainer users={users} />\r\n// //         </div>\r\n// //     );\r\n// // };\r\n\r\n// // export default Chat;\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import queryString from 'query-string';\r\n// import io from 'socket.io-client';\r\n// import { useLocation } from 'react-router-dom';\r\n// import Infobar from '../Infobar/Infobar';\r\n// import Input from '../Input/Input';\r\n// import Messages from '../Messages/Messages';\r\n// import TextContainer from '../TextContainer/TextContainer';\r\n// import './Chat.css';\r\n\r\n// let socket;\r\n\r\n// const Chat = () => {\r\n//     const location = useLocation();\r\n//     const [name, setName] = useState('');\r\n//     const [room, setRoom] = useState('');\r\n//     const [users, setUsers] = useState([]);\r\n//     const [message, setMessage] = useState('');\r\n//     const [messages, setMessages] = useState([]);\r\n//     const [scheduledMessages, setScheduledMessages] = useState([]); // New state for scheduled messages\r\n//     const [scheduleTime, setScheduleTime] = useState('');\r\n//     const ENDPOINT = 'http://localhost:5000';\r\n\r\n//     useEffect(() => {\r\n//         const { name, room } = queryString.parse(location.search);\r\n//         socket = io(ENDPOINT);\r\n//         setName(name);\r\n//         setRoom(room);\r\n\r\n//         socket.emit('join', { name, room }, (error) => {\r\n//             if (error) {\r\n//                 alert(error);\r\n//             }\r\n//         });\r\n\r\n//         socket.on('message', (message) => {\r\n//             setMessages((prevMessages) => [...prevMessages, message]);\r\n//         });\r\n\r\n//         socket.on(\"roomData\", ({ users }) => {\r\n//             setUsers(users);\r\n//         });\r\n\r\n//         return () => {\r\n//             socket.disconnect();\r\n//             socket.off();\r\n//         };\r\n//     }, [ENDPOINT, location.search]);\r\n\r\n//     const sendMessage = (event) => {\r\n//         event.preventDefault();\r\n//         if (message) {\r\n//             const currentTime = new Date();\r\n//             const scheduledTime = new Date(scheduleTime);\r\n\r\n//             if (scheduledTime > currentTime) {\r\n//                 const timeDiff = scheduledTime - currentTime;\r\n\r\n//                 setTimeout(() => {\r\n//                     socket.emit('sendMessage', { text: message, user: name }, () => {\r\n//                         setMessage('');\r\n//                         setScheduleTime('');\r\n//                     });\r\n//                     setScheduledMessages((prev) => [...prev, { text: message, time: scheduledTime }]); // Store scheduled message\r\n//                 }, timeDiff);\r\n//             } else {\r\n//                 socket.emit('sendMessage', { text: message, user: name }, () => {\r\n//                     setMessage('');\r\n//                     setScheduleTime('');\r\n//                 });\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className='outerContainer'>\r\n//             <div className='container'>\r\n//                 <Infobar room={room} />\r\n//                 <div className=\"scheduledMessages\">\r\n//                     {scheduledMessages.map((msg, index) => (\r\n//                         <div key={index} className=\"scheduledMessage\">\r\n//                             <p>{`${msg.time.toLocaleString()}: ${msg.text}`}</p>\r\n//                         </div>\r\n//                     ))}\r\n//                 </div>\r\n//                 <Messages messages={messages} name={name} />\r\n//                 <Input \r\n//                     message={message} \r\n//                     setMessage={setMessage} \r\n//                     sendMessage={sendMessage} \r\n//                     scheduleTime={scheduleTime} \r\n//                     setScheduleTime={setScheduleTime} \r\n//                 />\r\n//             </div>\r\n//             <TextContainer users={users} />\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Chat;\r\n\r\n\r\n\r\n// Chat.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Infobar from '../Infobar/Infobar';\r\nimport Input from '../Input/Input';\r\nimport Messages from '../Messages/Messages';\r\nimport TextContainer from '../TextContainer/TextContainer';\r\nimport './Chat.css';\r\n\r\nlet socket;\r\n\r\nconst Chat = () => {\r\n    const location = useLocation();\r\n    const [name, setName] = useState('');\r\n    const [room, setRoom] = useState('');\r\n    const [users, setUsers] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [scheduledMessages, setScheduledMessages] = useState([]);\r\n    const ENDPOINT = 'http://localhost:5000';\r\n\r\n    useEffect(() => {\r\n        const { name, room } = queryString.parse(location.search);\r\n        socket = io(ENDPOINT);\r\n        setName(name);\r\n        setRoom(room);\r\n\r\n        socket.emit('join', { name, room }, (error) => {\r\n            if (error) {\r\n                alert(error);\r\n            }\r\n        });\r\n\r\n        socket.on('message', (message) => {\r\n            setMessages((prevMessages) => [...prevMessages, message]);\r\n        });\r\n\r\n        socket.on(\"roomData\", ({ users }) => {\r\n            setUsers(users);\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n            socket.off();\r\n        };\r\n    }, [ENDPOINT, location.search]);\r\n\r\n    const sendMessage = (event, scheduledTime = null) => {\r\n        event.preventDefault();\r\n        if (message) {\r\n            if (scheduledTime) {\r\n                const newScheduledMessage = {\r\n                    message,\r\n                    scheduledTime,\r\n                    id: Date.now(),\r\n                };\r\n                setScheduledMessages([...scheduledMessages, newScheduledMessage]);\r\n                setMessage('');\r\n            } else {\r\n                socket.emit('sendMessage', message, () => setMessage(''));\r\n            }\r\n        }\r\n    };\r\n\r\n    const sendScheduledMessage = (scheduledMessage) => {\r\n        socket.emit('sendMessage', scheduledMessage.message, () => {\r\n            setScheduledMessages((prev) =>\r\n                prev.filter((msg) => msg.id !== scheduledMessage.id)\r\n            );\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        scheduledMessages.forEach((msg) => {\r\n            const currentTime = new Date();\r\n            const scheduledTime = new Date(msg.scheduledTime);\r\n\r\n            if (scheduledTime > currentTime) {\r\n                const timeDiff = scheduledTime - currentTime;\r\n                setTimeout(() => sendScheduledMessage(msg), timeDiff);\r\n            }\r\n        });\r\n    }, [scheduledMessages]);\r\n\r\n    return (\r\n        <div className=\"outerContainer\">\r\n            <div className=\"container\">\r\n                <Infobar room={room} />\r\n\r\n                {/* Dropdown for Scheduled Messages */}\r\n                <div className=\"dropdown\">\r\n                    <button className=\"dropbtn\">Scheduled Messages</button>\r\n                    <div className=\"dropdown-content\">\r\n                        {scheduledMessages.length > 0 ? (\r\n                            scheduledMessages.map((msg) => (\r\n                                <div key={msg.id}>\r\n                                    <p>{`[${new Date(msg.scheduledTime).toLocaleString()}] ${msg.message}`}</p>\r\n                                </div>\r\n                            ))\r\n                        ) : (\r\n                            <p>No scheduled messages</p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <Messages messages={messages} name={name} />\r\n                <Input \r\n                    message={message} \r\n                    setMessage={setMessage} \r\n                    sendMessage={sendMessage} \r\n                />\r\n            </div>\r\n            <TextContainer users={users} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,cAAc;AACtC,OAAOC,EAAE,MAAM,kBAAkB;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,aAAa,MAAM,gCAAgC;AAC1D,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,IAAIC,MAAM;AAEV,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}